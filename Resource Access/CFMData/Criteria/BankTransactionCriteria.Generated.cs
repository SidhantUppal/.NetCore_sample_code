//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'BankTransaction.cs'.
//
//     Template: Criteria.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


 

namespace CFMData
{
    [Serializable]
    public partial class BankTransactionCriteria 
    {
        private readonly Dictionary<string, object> _bag = new Dictionary<string, object>();
        
        #region Constructors

        public BankTransactionCriteria(){}

        public BankTransactionCriteria(System.Int32 bankTransactionID)
        {
            BankTransactionID = bankTransactionID;
        }

        #endregion

        #region Public Properties

        #region Read-Write

        public System.Int32 BankTransactionID
        {
            get { return GetValue<System.Int32>("BankTransactionID"); }
            set { _bag["BankTransactionID"] = value; }
        }

        public System.Int32? BankAccountID
        {
            get { return GetValue<System.Int32?>("BankAccountID"); }
            set { _bag["BankAccountID"] = value; }
        }

        public System.Int32 TransactionDate
        {
            get { return GetValue<System.Int32>("TransactionDate"); }
            set { _bag["TransactionDate"] = value; }
        }

        public System.String AccountNumber
        {
            get { return GetValue<System.String>("AccountNumber"); }
            set { _bag["AccountNumber"] = value; }
        }

        public System.DateTime AccountName
        {
            get { return GetValue<System.DateTime>("AccountName"); }
            set { _bag["AccountName"] = value; }
        }

        public System.String CurrencyCode
        {
            get { return GetValue<System.String>("CurrencyCode"); }
            set { _bag["CurrencyCode"] = value; }
        }

        public System.Decimal ClosingBalanace
        {
            get { return GetValue<System.Decimal>("ClosingBalanace"); }
            set { _bag["ClosingBalanace"] = value; }
        }

        public System.Decimal TransactionAmount
        {
            get { return GetValue<System.Decimal>("TransactionAmount"); }
            set { _bag["TransactionAmount"] = value; }
        }

        public System.String TransactionCode
        {
            get { return GetValue<System.String>("TransactionCode"); }
            set { _bag["TransactionCode"] = value; }
        }

        public System.String Narrative
        {
            get { return GetValue<System.String>("Narrative"); }
            set { _bag["Narrative"] = value; }
        }

        public System.Int32? SerialNumber
        {
            get { return GetValue<System.Int32?>("SerialNumber"); }
            set { _bag["SerialNumber"] = value; }
        }

        public System.String SegmentAccountNumber
        {
            get { return GetValue<System.String>("SegmentAccountNumber"); }
            set { _bag["SegmentAccountNumber"] = value; }
        }

        public System.String PaymentTransactionID
        {
            get { return GetValue<System.String>("PaymentTransactionID"); }
            set { _bag["PaymentTransactionID"] = value; }
        }

        public System.String InstructionID
        {
            get { return GetValue<System.String>("InstructionID"); }
            set { _bag["InstructionID"] = value; }
        }

        public System.Int32? ValueDate
        {
            get { return GetValue<System.Int32?>("ValueDate"); }
            set { _bag["ValueDate"] = value; }
        }

        public System.DateTime? TransactionDateTimeUTC
        {
            get { return GetValue<System.DateTime?>("TransactionDateTimeUTC"); }
            set { _bag["TransactionDateTimeUTC"] = value; }
        }

        public System.String DebtorName
        {
            get { return GetValue<System.String>("DebtorName"); }
            set { _bag["DebtorName"] = value; }
        }

        public System.String CreditorName
        {
            get { return GetValue<System.String>("CreditorName"); }
            set { _bag["CreditorName"] = value; }
        }

        public System.String EndToEndID
        {
            get { return GetValue<System.String>("EndToEndID"); }
            set { _bag["EndToEndID"] = value; }
        }

        public System.String RemittanceInformation1
        {
            get { return GetValue<System.String>("RemittanceInformation1"); }
            set { _bag["RemittanceInformation1"] = value; }
        }

        public System.String RemittanceInfoformation2
        {
            get { return GetValue<System.String>("RemittanceInfoformation2"); }
            set { _bag["RemittanceInfoformation2"] = value; }
        }

        public System.String PayiDType
        {
            get { return GetValue<System.String>("PayiDType"); }
            set { _bag["PayiDType"] = value; }
        }

        public System.String PayID
        {
            get { return GetValue<System.String>("PayID"); }
            set { _bag["PayID"] = value; }
        }

        public System.String ReversalreasonCode
        {
            get { return GetValue<System.String>("ReversalreasonCode"); }
            set { _bag["ReversalreasonCode"] = value; }
        }

        public System.String OriginalTransactionID
        {
            get { return GetValue<System.String>("OriginalTransactionID"); }
            set { _bag["OriginalTransactionID"] = value; }
        }

        public System.Boolean IsActive
        {
            get { return GetValue<System.Boolean>("IsActive"); }
            set { _bag["IsActive"] = value; }
        }

        public System.Int32 CreatedBy
        {
            get { return GetValue<System.Int32>("CreatedBy"); }
            set { _bag["CreatedBy"] = value; }
        }

        public System.DateTime CreatedOn
        {
            get { return GetValue<System.DateTime>("CreatedOn"); }
            set { _bag["CreatedOn"] = value; }
        }

        public System.Int32? UpdatedBy
        {
            get { return GetValue<System.Int32?>("UpdatedBy"); }
            set { _bag["UpdatedBy"] = value; }
        }

        public System.DateTime? UpdatedOn
        {
            get { return GetValue<System.DateTime?>("UpdatedOn"); }
            set { _bag["UpdatedOn"] = value; }
        }

        #endregion
        
        #region Read-Only

        public bool BankAccountIDHasValue
        {
            get { return _bag.ContainsKey("BankAccountID"); }
        }

        public bool NarrativeHasValue
        {
            get { return _bag.ContainsKey("Narrative"); }
        }

        public bool SerialNumberHasValue
        {
            get { return _bag.ContainsKey("SerialNumber"); }
        }

        public bool SegmentAccountNumberHasValue
        {
            get { return _bag.ContainsKey("SegmentAccountNumber"); }
        }

        public bool PaymentTransactionIDHasValue
        {
            get { return _bag.ContainsKey("PaymentTransactionID"); }
        }

        public bool InstructionIDHasValue
        {
            get { return _bag.ContainsKey("InstructionID"); }
        }

        public bool ValueDateHasValue
        {
            get { return _bag.ContainsKey("ValueDate"); }
        }

        public bool TransactionDateTimeUTCHasValue
        {
            get { return _bag.ContainsKey("TransactionDateTimeUTC"); }
        }

        public bool DebtorNameHasValue
        {
            get { return _bag.ContainsKey("DebtorName"); }
        }

        public bool CreditorNameHasValue
        {
            get { return _bag.ContainsKey("CreditorName"); }
        }

        public bool EndToEndIDHasValue
        {
            get { return _bag.ContainsKey("EndToEndID"); }
        }

        public bool RemittanceInformation1HasValue
        {
            get { return _bag.ContainsKey("RemittanceInformation1"); }
        }

        public bool RemittanceInfoformation2HasValue
        {
            get { return _bag.ContainsKey("RemittanceInfoformation2"); }
        }

        public bool PayiDTypeHasValue
        {
            get { return _bag.ContainsKey("PayiDType"); }
        }

        public bool PayIDHasValue
        {
            get { return _bag.ContainsKey("PayID"); }
        }

        public bool ReversalreasonCodeHasValue
        {
            get { return _bag.ContainsKey("ReversalreasonCode"); }
        }

        public bool OriginalTransactionIDHasValue
        {
            get { return _bag.ContainsKey("OriginalTransactionID"); }
        }

        public bool UpdatedByHasValue
        {
            get { return _bag.ContainsKey("UpdatedBy"); }
        }

        public bool UpdatedOnHasValue
        {
            get { return _bag.ContainsKey("UpdatedOn"); }
        }

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public Dictionary<string, object> StateBag
        {
            get
            {
                return _bag;
            }
        }

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public string TableFullName
        {
            get
            {
                return "[dbo].[BankTransaction]";
            }
        }

        #endregion

        #endregion

        #region Overrides
        
        public  string ToString()
        {
            var result = String.Empty;
            var cancel = false;
            
            OnToString(ref result, ref cancel);
            if(cancel && !String.IsNullOrEmpty(result))
                return result;
            
            if (_bag.Count == 0)
                return "No criterion was specified.";

            foreach (KeyValuePair<string, object> key in _bag)
            {
                result += String.Format("[{0}] = '{1}' AND ", key.Key, key.Value);
            }

            return result.Remove(result.Length - 5, 5);
        }

        #endregion

        #region Private Methods
        private T GetValue<T>(string name)
        {
            object value;
            if (_bag.TryGetValue(name, out value))
                return (T) value;
        
            return default(T);
        }
        
        #endregion
        
        #region Partial Methods
        
        partial void OnToString(ref string result, ref bool cancel);
        
        #endregion
        
    }
}