//------------------------------------------------------------------------------
// <autogenerated>
//     
//       Changes to this template will not be lost.
//
//     Template: EditableRootList.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Dapper;


namespace CFMData
{
    /// <summary>
    /// The DataOptionList class is a CSLA editable root list class collection of <see cref="DataOption"/> objects.  See CSLA documentation for a more detailed description.
    /// </summary>
    /// <returns></returns>
    public partial class DataOptionList
    {
        public static DataOptionList GetValidDataOptions(int dataoptionTypeId, int? currentId)
        {
            return new DataOptionList().GetValidDataOptionsInternal(dataoptionTypeId, currentId);
        }
    private DataOptionList GetValidDataOptionsInternal(int dataoptionTypeId, int? currentId)
    {
      bool cancel = false;
      
      if (cancel) return null;

      //RaiseListChangedEvents = false;

      // Fetch Child objects.
      using (var connection = new SqlConnection(ADOHelper.ConnectionString))
      {
        connection.Open();
        using (var command = new SqlCommand("[dbo].[spCFM_DataOption_SelectValid]", connection))
        {
          command.CommandType = CommandType.StoredProcedure;

          
          command.Parameters.AddWithValue("@p_DataOptionTypeID", dataoptionTypeId);
          if (currentId.HasValue)
          {
              command.Parameters.AddWithValue("@p_DataOptionID", currentId.Value);
          }
          using (var reader = command.ExecuteReader())
          {

            if (reader.Read())
            {
              var rowParser = reader.GetRowParser<CFMData.DataOption>();
              do
              {

                this.Add(CFMData.DataOption.GetDataOption(rowParser, reader));
              } while (reader.Read());
            }
            OnFetched();
            return this;
          }
        }
      }

      //RaiseListChangedEvents = true;


    }

    public List<DataOptionDTO> GetTree()
    {
        List<DataOptionDTO> lst = new List<DataOptionDTO>();
        foreach (DataOptionDTO DataOptionDTO in this.CurrentDTO.Where(x => !x.ParentID.HasValue))
        {
            AddNodes(DataOptionDTO);
            lst.Add(DataOptionDTO);
        }
        return lst;
    }
    private void AddNodes(DataOptionDTO rootNode)
    {
        foreach (DataOptionDTO DataOptionDTO in this.CurrentDTO.Where(x => x.ParentID.HasValue && x.ParentID.Value == rootNode.DataOptionID))
        {
            AddNodes(DataOptionDTO);
            rootNode.children.Add(DataOptionDTO);
        }
    }
  }
}