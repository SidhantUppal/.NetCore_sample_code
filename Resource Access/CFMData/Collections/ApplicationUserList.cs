//------------------------------------------------------------------------------
// <autogenerated>
//     
//       Changes to this template will not be lost.
//
//     Template: EditableRootList.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Dapper;


namespace CFMData
{
    /// <summary>
    /// The ApplicationUserList class is a CSLA editable root list class collection of <see cref="ApplicationUser"/> objects.  See CSLA documentation for a more detailed description.
    /// </summary>
    /// <returns></returns>
    public partial class ApplicationUserList
    {

    public static ApplicationUserList ValidateUser(string login, int? userID)
    {
        return new ApplicationUserList().DataPortal_Fetch(login, userID);
    }

    private ApplicationUserList DataPortal_Fetch(string login, int? userID)
    {
        bool cancel = false;

        if (cancel) return null;

        //RaiseListChangedEvents = false;

        // Fetch Child objects.
        using (var connection = new SqlConnection(ADOHelper.ConnectionString))
        {
            connection.Open();
            using (var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Validate]", connection))
            {
                command.CommandType = CommandType.StoredProcedure;

                command.Parameters.AddWithValue("@p_LoginName", login);
                if (userID.HasValue)
                {
                    command.Parameters.AddWithValue("@p_loginID", userID.Value);
                }


                using (var reader = command.ExecuteReader())
                {

                    if (reader.Read())
                    {
                        var rowParser = reader.GetRowParser<ApplicationUser>();
                        do
                        {

                            this.Add(ApplicationUser.GetApplicationUser(rowParser, reader));
                        } while (reader.Read());
                    }
                    return this;
                }
            }
        }
    }
  }
}