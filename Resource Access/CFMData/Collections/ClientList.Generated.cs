//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'ClientList.cs'.
//
//     Template: EditableRootList.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
 
namespace CFMData
{
    [Serializable]
    public partial class ClientList : List< Client>
    {    
        private List<ClientDTO> _currentDto =null; 
        public List<ClientDTO> CurrentDTO
        {
            get 
            {
                if (_currentDto==null)
                {
                    _currentDto=new List<ClientDTO>();
                    foreach (Client entity in this)
                    {
                        _currentDto.Add(entity.CurrentDTO);
                    }
                }
                return _currentDto;
			}
            
        }
        #region Contructor(s)

        public ClientList()
        { 
       //     AllowNew = true;
        }

        #endregion

       

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="ClientList"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="ClientList"/>.</returns>
        public static ClientList NewList()
        {
            return new ClientList();
        }      

        /// <summary>
        /// Returns a <see cref="ClientList"/> object of the specified criteria. 
        /// </summary>
        /// <param name="clientID">No additional detail available.</param>
        /// <returns>A <see cref="ClientList"/> object of the specified criteria.</returns>
        public static ClientList GetByClientID(System.Int32 clientID)
        {
            var criteria = new ClientCriteria{ClientID = clientID};
            
            
          return  new ClientList().DataPortal_Fetch(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ClientList"/> object of the specified criteria. 
        /// </summary>
        /// <param name="addressID">No additional detail available.</param>
        /// <returns>A <see cref="ClientList"/> object of the specified criteria.</returns>
        public static ClientList GetByAddressID(System.Int32? addressID)
        {
            var criteria = new ClientCriteria{};
                            if(addressID.HasValue) criteria.AddressID = addressID.Value;
            
          return  new ClientList().DataPortal_Fetch(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ClientList"/> object of the specified criteria. 
        /// </summary>
        /// <param name="createdBy">No additional detail available.</param>
        /// <returns>A <see cref="ClientList"/> object of the specified criteria.</returns>
        public static ClientList GetByCreatedBy(System.Int32 createdBy)
        {
            var criteria = new ClientCriteria{CreatedBy = createdBy};
            
            
          return  new ClientList().DataPortal_Fetch(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ClientList"/> object of the specified criteria. 
        /// </summary>
        /// <param name="statementDelOptID">No additional detail available.</param>
        /// <returns>A <see cref="ClientList"/> object of the specified criteria.</returns>
        public static ClientList GetByStatementDelOptID(System.Int32 statementDelOptID)
        {
            var criteria = new ClientCriteria{StatementDelOptID = statementDelOptID};
            
            
          return  new ClientList().DataPortal_Fetch(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ClientList"/> object of the specified criteria. 
        /// </summary>
        /// <param name="gLEntityID">No additional detail available.</param>
        /// <returns>A <see cref="ClientList"/> object of the specified criteria.</returns>
        public static ClientList GetByGLEntityID(System.Int32 gLEntityID)
        {
            var criteria = new ClientCriteria{GLEntityID = gLEntityID};
            
            
          return  new ClientList().DataPortal_Fetch(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ClientList"/> object of the specified criteria. 
        /// </summary>
        /// <param name="updatedBy">No additional detail available.</param>
        /// <returns>A <see cref="ClientList"/> object of the specified criteria.</returns>
        public static ClientList GetByUpdatedBy(System.Int32? updatedBy)
        {
            var criteria = new ClientCriteria{};
                            if(updatedBy.HasValue) criteria.UpdatedBy = updatedBy.Value;
            
          return  new ClientList().DataPortal_Fetch(criteria);
        }

        public static ClientList GetByCriteria(ClientCriteria criteria)
        {
          return  new ClientList().DataPortal_Fetch(criteria);
//            return DataPortal.Fetch<ClientList>(criteria);
        }

        public static ClientList GetAll()
        {
          return  new ClientList().DataPortal_Fetch(new ClientCriteria());
            //return DataPortal.Fetch<ClientList>(new ClientCriteria());
        }

        #endregion

        #region Asynchronous Factory Methods
     

     

     

     

     

     

     
 
        #endregion

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="Client"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Client"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="Client"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="ClientCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(ClientCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Client"/> object has been fetched. 
        /// </summary>
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Client"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Client"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Client"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="Client"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Client"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();
       // partial void OnAddNewCore(ref Client item, ref bool cancel);

        #endregion

    }
}