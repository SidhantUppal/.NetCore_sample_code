//------------------------------------------------------------------------------
// <autogenerated>
//     
//       Changes to this template will not be lost.
//
//     Template: EditableRootList.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using Dapper;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace CFMData
{
    /// <summary>
    /// The ClientList class is a CSLA editable root list class collection of <see cref="Client"/> objects.  See CSLA documentation for a more detailed description.
    /// </summary>
    /// <returns></returns>
    public partial class ClientList
    {
        public static ClientList ValidateClientAvailability(int clientID, int assignmentEntityTypeID, int assignmentEntityID, DateTime entryDate)
        {
            return new ClientList().DataPortal_Fetch(clientID, assignmentEntityTypeID, assignmentEntityID, entryDate);
        }

        private ClientList DataPortal_Fetch(int clientID, int assignmentEntityTypeID, int assignmentEntityID, DateTime entryDate)
        {
            bool cancel = false;

            if (cancel) return null;

            // Fetch Child objects.
            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("[dbo].[spCFM_ClientAvailability_Validate]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddWithValue("@p_ClientID", clientID);

                    command.Parameters.AddWithValue("@p_AssignmentEntityTypeID", assignmentEntityTypeID);

                    command.Parameters.AddWithValue("@p_AssignmentEntityID", assignmentEntityID);

                    command.Parameters.AddWithValue("@p_EntryDate", entryDate);

                    using (var reader = command.ExecuteReader())
                    {

                        if (reader.Read())
                        {
                            var rowParser = reader.GetRowParser<Client>();
                            do
                            {

                                this.Add(Client.GetClient(rowParser, reader));
                            } while (reader.Read());
                        }
                        return this;
                    }
                }
            }
        }
    }
}