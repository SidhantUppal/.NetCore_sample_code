//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'DataOption.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace CFMData
{
    [Serializable]
    public partial class DataOption 
    {
        #region Contructor(s)

        public DataOption()
        { /* Require use of factory methods */ }

        #endregion

			public DataOption  Save()
      {
        if (this.IsNew)
        {
            DataPortal_Insert();
			this.IsNew=false;
        }
        else
        {
            DataPortal_Update();
        }

        return this;
      }
	  
			public bool IsDirty=false;
			public bool IsNew=true;
			#region Properties
		
			private DataOptionDTO _currentDto = null;
			public DataOptionDTO CurrentDTO
			{
				get { return _currentDto; }
				set { _currentDto = value; }
			}

			private System.Int32 _dataOptionIDProperty  ;
			public System.Int32 DataOptionID
			{
				get { return _dataOptionIDProperty; }
				set
				{ 
                 
					if (_dataOptionIDProperty != value){
						IsDirty = true;
					}
					_dataOptionIDProperty=value; 
				}
			}

			private System.Int32 _dataOptionTypeIDProperty  ;
			public System.Int32 DataOptionTypeID
			{
				get { return _dataOptionTypeIDProperty; }
				set
				{ 
                 
					if (_dataOptionTypeIDProperty != value){
						IsDirty = true;
					}
					_dataOptionTypeIDProperty=value; 
				}
			}

			private System.String _codeProperty  = null;
			public System.String Code
			{
				get { return _codeProperty; }
				set
				{ 
                 
					if (_codeProperty != value){
						IsDirty = true;
					}
					_codeProperty=value; 
				}
			}

			private System.String _displayValueProperty  = null;
			public System.String DisplayValue
			{
				get { return _displayValueProperty; }
				set
				{ 
                 
					if (_displayValueProperty != value){
						IsDirty = true;
					}
					_displayValueProperty=value; 
				}
			}

			private System.Int32? _parentIDProperty  = null;
			public System.Int32? ParentID
			{
				get { return _parentIDProperty; }
				set
				{ 
                 
					if (_parentIDProperty != value){
						IsDirty = true;
					}
					_parentIDProperty=value; 
				}
			}

			private System.Int32 _sortIDProperty  ;
			public System.Int32 SortID
			{
				get { return _sortIDProperty; }
				set
				{ 
                 
					if (_sortIDProperty != value){
						IsDirty = true;
					}
					_sortIDProperty=value; 
				}
			}

			private System.Boolean _isSystemProperty  ;
			public System.Boolean IsSystem
			{
				get { return _isSystemProperty; }
				set
				{ 
                 
					if (_isSystemProperty != value){
						IsDirty = true;
					}
					_isSystemProperty=value; 
				}
			}

			private System.String _additionalConfigDataProperty  = null;
			public System.String AdditionalConfigData
			{
				get { return _additionalConfigDataProperty; }
				set
				{ 
                 
					if (_additionalConfigDataProperty != value){
						IsDirty = true;
					}
					_additionalConfigDataProperty=value; 
				}
			}

			private System.DateTime _activeFromProperty  ;
			public System.DateTime ActiveFrom
			{
				get { return _activeFromProperty; }
				set
				{ 
                 
					if (_activeFromProperty != value){
						IsDirty = true;
					}
					_activeFromProperty=value; 
				}
			}

			private System.DateTime? _activeToProperty  = null;
			public System.DateTime? ActiveTo
			{
				get { return _activeToProperty; }
				set
				{ 
                 
					if (_activeToProperty != value){
						IsDirty = true;
					}
					_activeToProperty=value; 
				}
			}

			private System.DateTime _createdOnProperty  ;
			public System.DateTime CreatedOn
			{
				get { return _createdOnProperty; }
				set
				{ 
                 
					if (_createdOnProperty != value){
						IsDirty = true;
					}
					_createdOnProperty=value; 
				}
			}

			private System.Int32 _createdByProperty  ;
			public System.Int32 CreatedBy
			{
				get { return _createdByProperty; }
				set
				{ 
                 
					if (_createdByProperty != value){
						IsDirty = true;
					}
					_createdByProperty=value; 
				}
			}

			private System.DateTime? _updatedOnProperty  = null;
			public System.DateTime? UpdatedOn
			{
				get { return _updatedOnProperty; }
				set
				{ 
                 
					if (_updatedOnProperty != value){
						IsDirty = true;
					}
					_updatedOnProperty=value; 
				}
			}

			private System.Int32? _updatedByProperty  = null;
			public System.Int32? UpdatedBy
			{
				get { return _updatedByProperty; }
				set
				{ 
                 
					if (_updatedByProperty != value){
						IsDirty = true;
					}
					_updatedByProperty=value; 
				}
			}

			// ManyToOne
			private bool _createdByApplicationUserPropertyChecked = false;
			private ApplicationUser _createdByApplicationUserProperty = null;
			public ApplicationUser CreatedByApplicationUser
			{
				get
				{
					if(!_createdByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {ApplicationUserID = CreatedBy};
						
						_createdByApplicationUserPropertyChecked=true;                       
						_createdByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(CreatedBy);
					}                
					return _createdByApplicationUserProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _updatedByApplicationUserPropertyChecked = false;
			private ApplicationUser _updatedByApplicationUserProperty = null;
			public ApplicationUser UpdatedByApplicationUser
			{
				get
				{
                    if(!UpdatedBy.HasValue) 
					return null;

					if(!_updatedByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {};
						if(UpdatedBy.HasValue) criteria.ApplicationUserID = UpdatedBy.Value;
						_updatedByApplicationUserPropertyChecked=true;                       
						_updatedByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(UpdatedBy.Value);
					}                
					return _updatedByApplicationUserProperty;
				}
			}

			// ManyToOne
			private bool _dataOptionTypePropertyChecked = false;
			private DataOptionType _dataOptionTypeProperty = null;
			public DataOptionType DataOptionType
			{
				get
				{
					if(!_dataOptionTypePropertyChecked)
					{						
						var criteria = new CFMData.DataOptionTypeCriteria {DataOptionTypeID = DataOptionTypeID};
						
						_dataOptionTypePropertyChecked=true;                       
						_dataOptionTypeProperty= CFMData.DataOptionType.GetByDataOptionTypeID(DataOptionTypeID);
					}                
					return _dataOptionTypeProperty;
				}
			}

			// ZeroOrOneToMany
			//PropertyInfo<AddressList>
			private bool _stateAddressesPropertyChecked = false;
			private AddressList _stateAddressesProperty = null;
			public AddressList StateAddresses
			{
				get
				{
					if(!_stateAddressesPropertyChecked )
					{
						_stateAddressesPropertyChecked =true; 
						var criteria = new CFMData.AddressCriteria {StateID = DataOptionID};
						                        
						_stateAddressesProperty= CFMData.AddressList.GetByStateID(DataOptionID);
 
					}
					return _stateAddressesProperty;
				}
			}

			// ZeroOrOneToMany
			//PropertyInfo<AddressList>
			private bool _countryAddressesPropertyChecked = false;
			private AddressList _countryAddressesProperty = null;
			public AddressList CountryAddresses
			{
				get
				{
					if(!_countryAddressesPropertyChecked )
					{
						_countryAddressesPropertyChecked =true; 
						var criteria = new CFMData.AddressCriteria {CountryID = DataOptionID};
						                        
						_countryAddressesProperty= CFMData.AddressList.GetByCountryID(DataOptionID);
 
					}
					return _countryAddressesProperty;
				}
			}

			// ZeroOrOneToMany
			//PropertyInfo<ApplicationUserList>
			private bool _applicationUsersPropertyChecked = false;
			private ApplicationUserList _applicationUsersProperty = null;
			public ApplicationUserList ApplicationUsers
			{
				get
				{
					if(!_applicationUsersPropertyChecked )
					{
						_applicationUsersPropertyChecked =true; 
						var criteria = new CFMData.ApplicationUserCriteria {StatementDeliveryOptionID = DataOptionID};
						                        
						_applicationUsersProperty= CFMData.ApplicationUserList.GetByStatementDeliveryOptionID(DataOptionID);
 
					}
					return _applicationUsersProperty;
				}
			}

			// OneToMany
			//PropertyInfo<BudgetLineCategoryList>
			private bool _budgetLineCategoriesPropertyChecked = false;
			private BudgetLineCategoryList _budgetLineCategoriesProperty = null;
			public BudgetLineCategoryList BudgetLineCategories
			{
				get
				{
					if(!_budgetLineCategoriesPropertyChecked )
					{
						_budgetLineCategoriesPropertyChecked =true; 
						var criteria = new CFMData.BudgetLineCategoryCriteria {BudgetLineCategoryTypeID = DataOptionID};
						                        
						_budgetLineCategoriesProperty= CFMData.BudgetLineCategoryList.GetByBudgetLineCategoryTypeID(DataOptionID);
 
					}
					return _budgetLineCategoriesProperty;
				}
			}

			// OneToMany
			//PropertyInfo<ClientList>
			private bool _clientsPropertyChecked = false;
			private ClientList _clientsProperty = null;
			public ClientList Clients
			{
				get
				{
					if(!_clientsPropertyChecked )
					{
						_clientsPropertyChecked =true; 
						var criteria = new CFMData.ClientCriteria {StatementDelOptID = DataOptionID};
						                        
						_clientsProperty= CFMData.ClientList.GetByStatementDelOptID(DataOptionID);
 
					}
					return _clientsProperty;
				}
			}

			// ZeroOrOneToMany
			//PropertyInfo<DataOptionTypeList>
			private bool _dataOptionTypesPropertyChecked = false;
			private DataOptionTypeList _dataOptionTypesProperty = null;
			public DataOptionTypeList DataOptionTypes
			{
				get
				{
					if(!_dataOptionTypesPropertyChecked )
					{
						_dataOptionTypesPropertyChecked =true; 
						var criteria = new CFMData.DataOptionTypeCriteria {DefaultValue = DataOptionID};
						                        
						_dataOptionTypesProperty= CFMData.DataOptionTypeList.GetByDefaultValue(DataOptionID);
 
					}
					return _dataOptionTypesProperty;
				}
			}

			// OneToMany
			//PropertyInfo<HomeList>
			private bool _homesPropertyChecked = false;
			private HomeList _homesProperty = null;
			public HomeList Homes
			{
				get
				{
					if(!_homesPropertyChecked )
					{
						_homesPropertyChecked =true; 
						var criteria = new CFMData.HomeCriteria {AccommodationTypeId = DataOptionID};
						                        
						_homesProperty= CFMData.HomeList.GetByAccommodationTypeId(DataOptionID);
 
					}
					return _homesProperty;
				}
			}


        #endregion
		public bool IsChildDirty()
		{
		
		
			 
			if(_stateAddressesPropertyChecked)
			{
					if(_stateAddressesProperty != null)
					{
						foreach (Address childObj in _stateAddressesProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 

			 
			if(_countryAddressesPropertyChecked)
			{
					if(_countryAddressesProperty != null)
					{
						foreach (Address childObj in _countryAddressesProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 

			 
			if(_applicationUsersPropertyChecked)
			{
					if(_applicationUsersProperty != null)
					{
						foreach (ApplicationUser childObj in _applicationUsersProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 

			 
			if(_budgetLineCategoriesPropertyChecked)
			{
					if(_budgetLineCategoriesProperty != null)
					{
						foreach (BudgetLineCategory childObj in _budgetLineCategoriesProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 

			 
			if(_clientsPropertyChecked)
			{
					if(_clientsProperty != null)
					{
						foreach (Client childObj in _clientsProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 

			 
			if(_dataOptionTypesPropertyChecked)
			{
					if(_dataOptionTypesProperty != null)
					{
						foreach (DataOptionType childObj in _dataOptionTypesProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 

			 
			if(_homesPropertyChecked)
			{
					if(_homesProperty != null)
					{
						foreach (Home childObj in _homesProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 



			return false;
		}

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="DataOption"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="DataOption"/>.</returns>    
        public static DataOption NewDataOption()
        {
            DataOption obj=new DataOption();

            return obj;
        }

			public static DataOption GetDataOption(Func<IDataReader, DataOption> rowParser,SqlDataReader reader)
			{
				DataOption obj = rowParser(reader);
				obj.InitDTO();					
				obj.IsDirty = false;
				obj.IsNew = false;
				return obj;
			}
        
 

        /// <summary>
        /// Returns a <see cref="DataOption"/> object of the specified criteria. 
        /// </summary>
        /// <param name="dataOptionID">No additional detail available.</param>
        /// <returns>A <see cref="DataOption"/> object of the specified criteria.</returns>
        public static DataOption GetByDataOptionID(System.Int32 dataOptionID)
        {
            var criteria = new DataOptionCriteria {DataOptionID = dataOptionID};
            
            
          return  new DataOption().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="DataOption"/> object of the specified criteria. 
        /// </summary>
        /// <param name="createdBy">No additional detail available.</param>
        /// <returns>A <see cref="DataOption"/> object of the specified criteria.</returns>
        public static DataOption GetByCreatedBy(System.Int32 createdBy)
        {
            var criteria = new DataOptionCriteria {CreatedBy = createdBy};
            
            
          return  new DataOption().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="DataOption"/> object of the specified criteria. 
        /// </summary>
        /// <param name="updatedBy">No additional detail available.</param>
        /// <returns>A <see cref="DataOption"/> object of the specified criteria.</returns>
        public static DataOption GetByUpdatedBy(System.Int32? updatedBy)
        {
            var criteria = new DataOptionCriteria {};
                            if(updatedBy.HasValue) criteria.UpdatedBy = updatedBy.Value;
            
          return  new DataOption().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="DataOption"/> object of the specified criteria. 
        /// </summary>
        /// <param name="dataOptionTypeID">No additional detail available.</param>
        /// <returns>A <see cref="DataOption"/> object of the specified criteria.</returns>
        public static DataOption GetByDataOptionTypeID(System.Int32 dataOptionTypeID)
        {
            var criteria = new DataOptionCriteria {DataOptionTypeID = dataOptionTypeID};
            
            
          return  new DataOption().DataPortal_Fetch(criteria);
           
        }

        public static void DeleteDataOption(System.Int32 dataOptionID)
        {
            var criteria = new DataOptionCriteria {DataOptionID = dataOptionID};
            
            
             new DataOption().DataPortal_Delete(criteria);
        }

        #endregion
 

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="DataOption"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="DataOptionCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(DataOptionCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="DataOption"/> object has been fetched. 
        /// </summary>    
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);
 
        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="DataOption"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="DataOption"/> object has been inserted. 
        /// </summary>
        partial void OnInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="DataOption"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="DataOption"/> object has been deleted. 
        /// </summary>
        partial void OnSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="DataOptionCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(DataOptionCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="DataOption"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
        #region ChildPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="DataOption"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="DataOptionCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(DataOptionCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="DataOption"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="DataOption"/> object has been mapped. 
        /// </summary>
        //partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="DataOption"/> object. 
        /// </summary>
        partial void OnChildInserting(ApplicationUser applicationUser, DataOptionType dataOptionType, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="DataOption"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="DataOption"/> object. 
        /// </summary>
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildUpdating(ApplicationUser applicationUser, DataOptionType dataOptionType, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="DataOption"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="DataOption"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="DataOptionCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        //partial void OnDeleting(DataOptionCriteria criteria, ref bool cancel);
        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="DataOption"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="DataOptionCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(DataOptionCriteria criteria, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="DataOption"/> object with the specified criteria has been deleted. 
        /// </summary>
        //partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
   

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the DataOption table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="DataOption"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static DataOption Exists(DataOptionCriteria criteria)
        {
			try
			{
					
				return new DataOption().DataPortal_Fetch(criteria);
			}
			catch(Exception ex)
			{
			}
			return null;
			
        }

        
        #endregion

    }
}