//------------------------------------------------------------------------------
// <autogenerated>
//     
//       Changes to this template will not be lost.
//
//     Template: EditableRoot.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data.SqlClient;


namespace CFMData
{
    /// <summary>
    /// The GLAccount class is a editable root class.
    /// </summary>
    public partial class GLAccount
    {
        #region Business Rules

        /// <summary>
        /// All custom rules need to be placed in this method.
        /// </summary>
        /// <returns>Return true to override the generated rules; If false generated rules will be run.</returns>
        protected bool AddBusinessValidationRules()
        {
            // TODO: add validation rules
            //BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(MyProperty));

            return false;
        }

        #endregion
        private bool ClearingBankAccount = false;

        public void SetBankAccount(BankAccount ba, bool isClearing = false)
        {
            _bankAccountProperty = ba;
            _bankAccountPropertyChecked = true;
            this.IsDirty = true;
            this.BankAccountID = -9;
            ClearingBankAccount = isClearing;
        }

        partial void OnChildUpdating(ApplicationUser applicationUser, BankAccount bankAccount,
            GLAccountType gLAccountType, GLEntity gLEntity, SqlConnection connection, ref bool cancel,
            SqlTransaction trans)
        {
            InsertUpdateBankAccount(connection, trans);
        }

        partial void OnChildInserting(ApplicationUser applicationUser, BankAccount bankAccount, GLAccountType gLAccountType, GLEntity gLEntity, SqlConnection connection, ref bool cancel, SqlTransaction trans)
        {
            InsertUpdateBankAccount(connection, trans);
        }

        partial void OnChildUpdating(SqlConnection connection, ref bool cancel, SqlTransaction trans)
        {
            InsertUpdateBankAccount(connection, trans);


        }
        private void InsertUpdateBankAccount(SqlConnection connection, SqlTransaction trans)
        {
            if (_bankAccountProperty != null)
            {
                if (_bankAccountProperty.IsNew)
                {
                    _bankAccountProperty.Child_Insert(connection, trans);
                }
                else
                {
                    _bankAccountProperty.Child_Update(connection, trans);
                }
                if (this.ClearingBankAccount)
                {
                    this.BankAccountID = null;
                }
                else
                {
                    this.BankAccountID = _bankAccountProperty.BankAccountID;
                }


            }
        }


    }
}