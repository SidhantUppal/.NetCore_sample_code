//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Home.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace CFMData
{
    [Serializable]
    public partial class Home 
    {
        #region Contructor(s)

        public Home()
        { /* Require use of factory methods */ }

        #endregion

			public Home  Save()
      {
        if (this.IsNew)
        {
            DataPortal_Insert();
			this.IsNew=false;
        }
        else
        {
            DataPortal_Update();
        }

        return this;
      }
	  
			public bool IsDirty=false;
			public bool IsNew=true;
			#region Properties
		
			private HomeDTO _currentDto = null;
			public HomeDTO CurrentDTO
			{
				get { return _currentDto; }
				set { _currentDto = value; }
			}

			private System.Int32 _homeIDProperty  ;
			public System.Int32 HomeID
			{
				get { return _homeIDProperty; }
				set
				{ 
                 
					if (_homeIDProperty != value){
						IsDirty = true;
					}
					_homeIDProperty=value; 
				}
			}

			private System.Int32 _gLEntityIDProperty  ;
			public System.Int32 GLEntityID
			{
				get { return _gLEntityIDProperty; }
				set
				{ 
                 
					if (_gLEntityIDProperty != value){
						IsDirty = true;
					}
					_gLEntityIDProperty=value; 
				}
			}

			private System.Int32 _businessAreaIDProperty  ;
			public System.Int32 BusinessAreaID
			{
				get { return _businessAreaIDProperty; }
				set
				{ 
                 
					if (_businessAreaIDProperty != value){
						IsDirty = true;
					}
					_businessAreaIDProperty=value; 
				}
			}

			private System.String _homeCostCentreCodeProperty  ;
			public System.String HomeCostCentreCode
			{
				get { return _homeCostCentreCodeProperty; }
				set
				{ 
                 
					if (_homeCostCentreCodeProperty != value){
						IsDirty = true;
					}
					_homeCostCentreCodeProperty=value; 
				}
			}

			private System.String _homeNameProperty  ;
			public System.String HomeName
			{
				get { return _homeNameProperty; }
				set
				{ 
                 
					if (_homeNameProperty != value){
						IsDirty = true;
					}
					_homeNameProperty=value; 
				}
			}

			private System.String _parcelProperty  ;
			public System.String Parcel
			{
				get { return _parcelProperty; }
				set
				{ 
                 
					if (_parcelProperty != value){
						IsDirty = true;
					}
					_parcelProperty=value; 
				}
			}

			private System.Int32 _sILTargetProperty  ;
			public System.Int32 SILTarget
			{
				get { return _sILTargetProperty; }
				set
				{ 
                 
					if (_sILTargetProperty != value){
						IsDirty = true;
					}
					_sILTargetProperty=value; 
				}
			}

			private System.Int32 _noofBedsProperty  ;
			public System.Int32 NoofBeds
			{
				get { return _noofBedsProperty; }
				set
				{ 
                 
					if (_noofBedsProperty != value){
						IsDirty = true;
					}
					_noofBedsProperty=value; 
				}
			}

			private System.Int32 _accommodationTypeIdProperty  ;
			public System.Int32 AccommodationTypeId
			{
				get { return _accommodationTypeIdProperty; }
				set
				{ 
                 
					if (_accommodationTypeIdProperty != value){
						IsDirty = true;
					}
					_accommodationTypeIdProperty=value; 
				}
			}

			private System.Boolean _isGSTProperty  ;
			public System.Boolean IsGST
			{
				get { return _isGSTProperty; }
				set
				{ 
                 
					if (_isGSTProperty != value){
						IsDirty = true;
					}
					_isGSTProperty=value; 
				}
			}
			public System.Boolean isGST
			{
				get { return _isGSTProperty; }
				set
				{ 
                 
					if (_isGSTProperty != value){
						IsDirty = true;
					}
					_isGSTProperty=value; 
				}
			}

			private System.Int32? _addressIDProperty  = null;
			public System.Int32? AddressID
			{
				get { return _addressIDProperty; }
				set
				{ 
                 
					if (_addressIDProperty != value){
						IsDirty = true;
					}
					_addressIDProperty=value; 
				}
			}

			private System.Boolean _isActiveProperty  ;
			public System.Boolean IsActive
			{
				get { return _isActiveProperty; }
				set
				{ 
                 
					if (_isActiveProperty != value){
						IsDirty = true;
					}
					_isActiveProperty=value; 
				}
			}

			private System.Int32 _createdByProperty  ;
			public System.Int32 CreatedBy
			{
				get { return _createdByProperty; }
				set
				{ 
                 
					if (_createdByProperty != value){
						IsDirty = true;
					}
					_createdByProperty=value; 
				}
			}

			private System.DateTime _createdOnProperty  ;
			public System.DateTime CreatedOn
			{
				get { return _createdOnProperty; }
				set
				{ 
                 
					if (_createdOnProperty != value){
						IsDirty = true;
					}
					_createdOnProperty=value; 
				}
			}

			private System.Int32? _updatedByProperty  = null;
			public System.Int32? UpdatedBy
			{
				get { return _updatedByProperty; }
				set
				{ 
                 
					if (_updatedByProperty != value){
						IsDirty = true;
					}
					_updatedByProperty=value; 
				}
			}

			private System.DateTime? _updatedOnProperty  = null;
			public System.DateTime? UpdatedOn
			{
				get { return _updatedOnProperty; }
				set
				{ 
                 
					if (_updatedOnProperty != value){
						IsDirty = true;
					}
					_updatedOnProperty=value; 
				}
			}

			// ManyToOne
			private bool _createdByApplicationUserPropertyChecked = false;
			private ApplicationUser _createdByApplicationUserProperty = null;
			public ApplicationUser CreatedByApplicationUser
			{
				get
				{
					if(!_createdByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {ApplicationUserID = CreatedBy};
						
						_createdByApplicationUserPropertyChecked=true;                       
						_createdByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(CreatedBy);
					}                
					return _createdByApplicationUserProperty;
				}
			}

			// ManyToOne
			private bool _businessAreaPropertyChecked = false;
			private BusinessArea _businessAreaProperty = null;
			public BusinessArea BusinessArea
			{
				get
				{
					if(!_businessAreaPropertyChecked)
					{						
						var criteria = new CFMData.BusinessAreaCriteria {BusinessAreaID = BusinessAreaID};
						
						_businessAreaPropertyChecked=true;                       
						_businessAreaProperty= CFMData.BusinessArea.GetByBusinessAreaID(BusinessAreaID);
					}                
					return _businessAreaProperty;
				}
			}

			// ManyToOne
			private bool _dataOptionPropertyChecked = false;
			private DataOption _dataOptionProperty = null;
			public DataOption DataOption
			{
				get
				{
					if(!_dataOptionPropertyChecked)
					{						
						var criteria = new CFMData.DataOptionCriteria {DataOptionID = AccommodationTypeId};
						
						_dataOptionPropertyChecked=true;                       
						_dataOptionProperty= CFMData.DataOption.GetByDataOptionID(AccommodationTypeId);
					}                
					return _dataOptionProperty;
				}
			}

			// ManyToOne
			private bool _gLEntityPropertyChecked = false;
			private GLEntity _gLEntityProperty = null;
			public GLEntity GLEntity
			{
				get
				{
					if(!_gLEntityPropertyChecked)
					{						
						var criteria = new CFMData.GLEntityCriteria {GLEntityID = GLEntityID};
						
						_gLEntityPropertyChecked=true;                       
						_gLEntityProperty= CFMData.GLEntity.GetByGLEntityID(GLEntityID);
					}                
					return _gLEntityProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _updatedByApplicationUserPropertyChecked = false;
			private ApplicationUser _updatedByApplicationUserProperty = null;
			public ApplicationUser UpdatedByApplicationUser
			{
				get
				{
                    if(!UpdatedBy.HasValue) 
					return null;

					if(!_updatedByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {};
						if(UpdatedBy.HasValue) criteria.ApplicationUserID = UpdatedBy.Value;
						_updatedByApplicationUserPropertyChecked=true;                       
						_updatedByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(UpdatedBy.Value);
					}                
					return _updatedByApplicationUserProperty;
				}
			}

			// ZeroOrOneToMany
			//PropertyInfo<ApplicationPermissionList>
			private bool _applicationPermissionsPropertyChecked = false;
			private ApplicationPermissionList _applicationPermissionsProperty = null;
			public ApplicationPermissionList ApplicationPermissions
			{
				get
				{
					if(!_applicationPermissionsPropertyChecked )
					{
						_applicationPermissionsPropertyChecked =true; 
						var criteria = new CFMData.ApplicationPermissionCriteria {HomeID = HomeID};
						                        
						_applicationPermissionsProperty= CFMData.ApplicationPermissionList.GetByHomeID(HomeID);
 
					}
					return _applicationPermissionsProperty;
				}
			}

			// ZeroOrOneToMany
			//PropertyInfo<BudgetList>
			private bool _budgetsPropertyChecked = false;
			private BudgetList _budgetsProperty = null;
			public BudgetList Budgets
			{
				get
				{
					if(!_budgetsPropertyChecked )
					{
						_budgetsPropertyChecked =true; 
						var criteria = new CFMData.BudgetCriteria {HomeID = HomeID};
						                        
						_budgetsProperty= CFMData.BudgetList.GetByHomeID(HomeID);
 
					}
					return _budgetsProperty;
				}
			}

			// OneToMany
			//PropertyInfo<HomeClientList>
			private bool _homeClientsPropertyChecked = false;
			private HomeClientList _homeClientsProperty = null;
			public HomeClientList HomeClients
			{
				get
				{
					if(!_homeClientsPropertyChecked )
					{
						_homeClientsPropertyChecked =true; 
						var criteria = new CFMData.HomeClientCriteria {HomeID = HomeID};
						                        
						_homeClientsProperty= CFMData.HomeClientList.GetByHomeID(HomeID);
 
					}
					return _homeClientsProperty;
				}
			}


        #endregion
		public bool IsChildDirty()
		{
		
		
			 
			if(_applicationPermissionsPropertyChecked)
			{
					if(_applicationPermissionsProperty != null)
					{
						foreach (ApplicationPermission childObj in _applicationPermissionsProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 

			 
			if(_budgetsPropertyChecked)
			{
					if(_budgetsProperty != null)
					{
						foreach (Budget childObj in _budgetsProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 

			 
			if(_homeClientsPropertyChecked)
			{
					if(_homeClientsProperty != null)
					{
						foreach (HomeClient childObj in _homeClientsProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 



			return false;
		}

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="Home"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="Home"/>.</returns>    
        public static Home NewHome()
        {
            Home obj=new Home();

            return obj;
        }

			public static Home GetHome(Func<IDataReader, Home> rowParser,SqlDataReader reader)
			{
				Home obj = rowParser(reader);
				obj.InitDTO();					
				obj.IsDirty = false;
				obj.IsNew = false;
				return obj;
			}
        
 

        /// <summary>
        /// Returns a <see cref="Home"/> object of the specified criteria. 
        /// </summary>
        /// <param name="homeID">No additional detail available.</param>
        /// <returns>A <see cref="Home"/> object of the specified criteria.</returns>
        public static Home GetByHomeID(System.Int32 homeID)
        {
            var criteria = new HomeCriteria {HomeID = homeID};
            
            
          return  new Home().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Home"/> object of the specified criteria. 
        /// </summary>
        /// <param name="createdBy">No additional detail available.</param>
        /// <returns>A <see cref="Home"/> object of the specified criteria.</returns>
        public static Home GetByCreatedBy(System.Int32 createdBy)
        {
            var criteria = new HomeCriteria {CreatedBy = createdBy};
            
            
          return  new Home().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Home"/> object of the specified criteria. 
        /// </summary>
        /// <param name="businessAreaID">No additional detail available.</param>
        /// <returns>A <see cref="Home"/> object of the specified criteria.</returns>
        public static Home GetByBusinessAreaID(System.Int32 businessAreaID)
        {
            var criteria = new HomeCriteria {BusinessAreaID = businessAreaID};
            
            
          return  new Home().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Home"/> object of the specified criteria. 
        /// </summary>
        /// <param name="accommodationTypeId">No additional detail available.</param>
        /// <returns>A <see cref="Home"/> object of the specified criteria.</returns>
        public static Home GetByAccommodationTypeId(System.Int32 accommodationTypeId)
        {
            var criteria = new HomeCriteria {AccommodationTypeId = accommodationTypeId};
            
            
          return  new Home().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Home"/> object of the specified criteria. 
        /// </summary>
        /// <param name="gLEntityID">No additional detail available.</param>
        /// <returns>A <see cref="Home"/> object of the specified criteria.</returns>
        public static Home GetByGLEntityID(System.Int32 gLEntityID)
        {
            var criteria = new HomeCriteria {GLEntityID = gLEntityID};
            
            
          return  new Home().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Home"/> object of the specified criteria. 
        /// </summary>
        /// <param name="updatedBy">No additional detail available.</param>
        /// <returns>A <see cref="Home"/> object of the specified criteria.</returns>
        public static Home GetByUpdatedBy(System.Int32? updatedBy)
        {
            var criteria = new HomeCriteria {};
                            if(updatedBy.HasValue) criteria.UpdatedBy = updatedBy.Value;
            
          return  new Home().DataPortal_Fetch(criteria);
           
        }

        public static void DeleteHome(System.Int32 homeID)
        {
            var criteria = new HomeCriteria {HomeID = homeID};
            
            
             new Home().DataPortal_Delete(criteria);
        }

        #endregion
 

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Home"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the <see cref="Home"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="HomeCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(HomeCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Home"/> object has been fetched. 
        /// </summary>    
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);
 
        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="Home"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Home"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Home"/> object has been inserted. 
        /// </summary>
        partial void OnInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Home"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Home"/> object has been deleted. 
        /// </summary>
        partial void OnSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the <see cref="Home"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="HomeCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(HomeCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Home"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
        #region ChildPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Home"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="HomeCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(HomeCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Home"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Home"/> object has been mapped. 
        /// </summary>
        //partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Home"/> object. 
        /// </summary>
        partial void OnChildInserting(ApplicationUser applicationUser, BusinessArea businessArea, DataOption dataOption, GLEntity gLEntity, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Home"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Home"/> object. 
        /// </summary>
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildUpdating(ApplicationUser applicationUser, BusinessArea businessArea, DataOption dataOption, GLEntity gLEntity, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Home"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Home"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="HomeCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        //partial void OnDeleting(HomeCriteria criteria, ref bool cancel);
        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="Home"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="HomeCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(HomeCriteria criteria, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Home"/> object with the specified criteria has been deleted. 
        /// </summary>
        //partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
   

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the Home table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="Home"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static Home Exists(HomeCriteria criteria)
        {
			try
			{
					
				return new Home().DataPortal_Fetch(criteria);
			}
			catch(Exception ex)
			{
			}
			return null;
			
        }

        
        #endregion

    }
}