//------------------------------------------------------------------------------
// <autogenerated>
//     
//       Changes to this template will not be lost.
//
//     Template: EditableRoot.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data.SqlClient;

namespace CFMData
{    
    /// <summary>
    /// The FinAdministrator class is a editable root class.
    /// </summary>
    public partial class FinAdministrator
    {
        #region Business Rules
    
        /// <summary>
        /// All custom rules need to be placed in this method.
        /// </summary>
        /// <returns>Return true to override the generated rules; If false generated rules will be run.</returns>
        protected bool AddBusinessValidationRules()
        {
            // TODO: add validation rules
            //BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(MyProperty));

            return false;
        }

        #endregion

        private bool ClearingAddress = false;

        public void SetAddress(Address address, bool isClearing = false)
        {
            _addressProperty = address;
            _addressPropertyChecked = true;
            this.IsDirty = true;
            this.AddressID = -9;
            ClearingAddress = isClearing;
        }

        partial void OnChildUpdating(Address address, ApplicationUser applicationUser, BankAccount bankAccount, GLEntity gLEntity, SqlConnection connection, ref bool cancel, SqlTransaction trans)
        {
            InsertUpdateAddress(connection, trans);
        }

        partial void OnChildInserting(Address address, ApplicationUser applicationUser, BankAccount bankAccount, GLEntity gLEntity, SqlConnection connection, ref bool cancel, SqlTransaction trans)
        {
            InsertUpdateAddress(connection, trans);
        }

        partial void OnChildUpdating(SqlConnection connection, ref bool cancel, SqlTransaction trans)
        {
            InsertUpdateAddress(connection, trans);
        }

        private void InsertUpdateAddress(SqlConnection connection, SqlTransaction trans)
        {
            if (_addressProperty != null)
            {
                if (_addressProperty.IsNew)
                {
                    _addressProperty.Child_Insert(connection, trans);
                }
                else
                {
                    _addressProperty.Child_Update(connection, trans);
                }
                if (this.ClearingAddress)
                {
                    this.AddressID = null;
                }
                else
                {
                    this.AddressID = _addressProperty.AddressID;
                }
            }
        }
    }
}