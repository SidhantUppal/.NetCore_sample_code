//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'GLAccountType.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace CFMData
{
    [Serializable]
    public partial class GLAccountType 
    {
        #region Contructor(s)

        public GLAccountType()
        { /* Require use of factory methods */ }

        #endregion

			public GLAccountType  Save()
      {
        if (this.IsNew)
        {
            DataPortal_Insert();
			this.IsNew=false;
        }
        else
        {
            DataPortal_Update();
        }

        return this;
      }
	  
			public bool IsDirty=false;
			public bool IsNew=true;
			#region Properties
		
			private GLAccountTypeDTO _currentDto = null;
			public GLAccountTypeDTO CurrentDTO
			{
				get { return _currentDto; }
				set { _currentDto = value; }
			}

			private System.Int32 _gLAccountTypeIDProperty  ;
			public System.Int32 GLAccountTypeID
			{
				get { return _gLAccountTypeIDProperty; }
				set
				{ 
                 
					if (_gLAccountTypeIDProperty != value){
						IsDirty = true;
					}
					_gLAccountTypeIDProperty=value; 
				}
			}

			private System.Int32 _originalGLAccountTypeIDProperty ;
			/// <summary>
			/// Holds the original value for GLAccountTypeID. This is used for non identity primary keys.
			/// </summary>
			internal System.Int32 OriginalGLAccountTypeID
			{
				get { return _originalGLAccountTypeIDProperty; }
				set{ _originalGLAccountTypeIDProperty= value; }
			}

			private System.String _codeProperty  = null;
			public System.String Code
			{
				get { return _codeProperty; }
				set
				{ 
                 
					if (_codeProperty != value){
						IsDirty = true;
					}
					_codeProperty=value; 
				}
			}

			private System.String _nameProperty  ;
			public System.String Name
			{
				get { return _nameProperty; }
				set
				{ 
                 
					if (_nameProperty != value){
						IsDirty = true;
					}
					_nameProperty=value; 
				}
			}

			private System.Int32? _gLEntityTypeIDProperty  = null;
			public System.Int32? GLEntityTypeID
			{
				get { return _gLEntityTypeIDProperty; }
				set
				{ 
                 
					if (_gLEntityTypeIDProperty != value){
						IsDirty = true;
					}
					_gLEntityTypeIDProperty=value; 
				}
			}

			private System.Boolean _isActiveProperty  ;
			public System.Boolean IsActive
			{
				get { return _isActiveProperty; }
				set
				{ 
                 
					if (_isActiveProperty != value){
						IsDirty = true;
					}
					_isActiveProperty=value; 
				}
			}

			private System.Int32 _createdByProperty  ;
			public System.Int32 CreatedBy
			{
				get { return _createdByProperty; }
				set
				{ 
                 
					if (_createdByProperty != value){
						IsDirty = true;
					}
					_createdByProperty=value; 
				}
			}

			private System.DateTime _createdOnProperty  ;
			public System.DateTime CreatedOn
			{
				get { return _createdOnProperty; }
				set
				{ 
                 
					if (_createdOnProperty != value){
						IsDirty = true;
					}
					_createdOnProperty=value; 
				}
			}

			private System.Int32? _updatedByProperty  = null;
			public System.Int32? UpdatedBy
			{
				get { return _updatedByProperty; }
				set
				{ 
                 
					if (_updatedByProperty != value){
						IsDirty = true;
					}
					_updatedByProperty=value; 
				}
			}

			private System.DateTime? _updatedOnProperty  = null;
			public System.DateTime? UpdatedOn
			{
				get { return _updatedOnProperty; }
				set
				{ 
                 
					if (_updatedOnProperty != value){
						IsDirty = true;
					}
					_updatedOnProperty=value; 
				}
			}

			private System.Boolean _canHaveBankAccountProperty  ;
			public System.Boolean CanHaveBankAccount
			{
				get { return _canHaveBankAccountProperty; }
				set
				{ 
                 
					if (_canHaveBankAccountProperty != value){
						IsDirty = true;
					}
					_canHaveBankAccountProperty=value; 
				}
			}

			private System.Boolean _canHaveBankCardsProperty  ;
			public System.Boolean CanHaveBankCards
			{
				get { return _canHaveBankCardsProperty; }
				set
				{ 
                 
					if (_canHaveBankCardsProperty != value){
						IsDirty = true;
					}
					_canHaveBankCardsProperty=value; 
				}
			}

			private System.Boolean _isMandatoryProperty  ;
			public System.Boolean IsMandatory
			{
				get { return _isMandatoryProperty; }
				set
				{ 
                 
					if (_isMandatoryProperty != value){
						IsDirty = true;
					}
					_isMandatoryProperty=value; 
				}
			}

			// ManyToOne
			private bool _createdByApplicationUserPropertyChecked = false;
			private ApplicationUser _createdByApplicationUserProperty = null;
			public ApplicationUser CreatedByApplicationUser
			{
				get
				{
					if(!_createdByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {ApplicationUserID = CreatedBy};
						
						_createdByApplicationUserPropertyChecked=true;                       
						_createdByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(CreatedBy);
					}                
					return _createdByApplicationUserProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _gLEntityTypePropertyChecked = false;
			private GLEntityType _gLEntityTypeProperty = null;
			public GLEntityType GLEntityType
			{
				get
				{
                    if(!GLEntityTypeID.HasValue) 
					return null;

					if(!_gLEntityTypePropertyChecked)
					{						
						var criteria = new CFMData.GLEntityTypeCriteria {};
						if(GLEntityTypeID.HasValue) criteria.GLEntityTypeID = GLEntityTypeID.Value;
						_gLEntityTypePropertyChecked=true;                       
						_gLEntityTypeProperty= CFMData.GLEntityType.GetByGLEntityTypeID(GLEntityTypeID.Value);
					}                
					return _gLEntityTypeProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _updatedByApplicationUserPropertyChecked = false;
			private ApplicationUser _updatedByApplicationUserProperty = null;
			public ApplicationUser UpdatedByApplicationUser
			{
				get
				{
                    if(!UpdatedBy.HasValue) 
					return null;

					if(!_updatedByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {};
						if(UpdatedBy.HasValue) criteria.ApplicationUserID = UpdatedBy.Value;
						_updatedByApplicationUserPropertyChecked=true;                       
						_updatedByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(UpdatedBy.Value);
					}                
					return _updatedByApplicationUserProperty;
				}
			}

			// OneToMany
			//PropertyInfo<GLAccountList>
			private bool _gLAccountsPropertyChecked = false;
			private GLAccountList _gLAccountsProperty = null;
			public GLAccountList GLAccounts
			{
				get
				{
					if(!_gLAccountsPropertyChecked )
					{
						_gLAccountsPropertyChecked =true; 
						var criteria = new CFMData.GLAccountCriteria {GLAccountTypeID = GLAccountTypeID};
						                        
						_gLAccountsProperty= CFMData.GLAccountList.GetByGLAccountTypeID(GLAccountTypeID);
 
					}
					return _gLAccountsProperty;
				}
			}


        #endregion
		public bool IsChildDirty()
		{
		
		
			 
			if(_gLAccountsPropertyChecked)
			{
					if(_gLAccountsProperty != null)
					{
						foreach (GLAccount childObj in _gLAccountsProperty)
                        {
                            if (childObj.IsDirty || childObj.IsChildDirty())
                            {
                                return true;
                            }
                        }
					}
			}
			 
 



			return false;
		}

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="GLAccountType"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="GLAccountType"/>.</returns>    
        public static GLAccountType NewGLAccountType()
        {
            GLAccountType obj=new GLAccountType();

            return obj;
        }

			public static GLAccountType GetGLAccountType(Func<IDataReader, GLAccountType> rowParser,SqlDataReader reader)
			{
				GLAccountType obj = rowParser(reader);
				obj.InitDTO();					
				obj.IsDirty = false;
				obj.IsNew = false;
				return obj;
			}
        
 

        /// <summary>
        /// Returns a <see cref="GLAccountType"/> object of the specified criteria. 
        /// </summary>
        /// <param name="gLAccountTypeID">No additional detail available.</param>
        /// <returns>A <see cref="GLAccountType"/> object of the specified criteria.</returns>
        public static GLAccountType GetByGLAccountTypeID(System.Int32 gLAccountTypeID)
        {
            var criteria = new GLAccountTypeCriteria {GLAccountTypeID = gLAccountTypeID};
            
            
          return  new GLAccountType().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="GLAccountType"/> object of the specified criteria. 
        /// </summary>
        /// <param name="createdBy">No additional detail available.</param>
        /// <returns>A <see cref="GLAccountType"/> object of the specified criteria.</returns>
        public static GLAccountType GetByCreatedBy(System.Int32 createdBy)
        {
            var criteria = new GLAccountTypeCriteria {CreatedBy = createdBy};
            
            
          return  new GLAccountType().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="GLAccountType"/> object of the specified criteria. 
        /// </summary>
        /// <param name="gLEntityTypeID">No additional detail available.</param>
        /// <returns>A <see cref="GLAccountType"/> object of the specified criteria.</returns>
        public static GLAccountType GetByGLEntityTypeID(System.Int32? gLEntityTypeID)
        {
            var criteria = new GLAccountTypeCriteria {};
                            if(gLEntityTypeID.HasValue) criteria.GLEntityTypeID = gLEntityTypeID.Value;
            
          return  new GLAccountType().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="GLAccountType"/> object of the specified criteria. 
        /// </summary>
        /// <param name="updatedBy">No additional detail available.</param>
        /// <returns>A <see cref="GLAccountType"/> object of the specified criteria.</returns>
        public static GLAccountType GetByUpdatedBy(System.Int32? updatedBy)
        {
            var criteria = new GLAccountTypeCriteria {};
                            if(updatedBy.HasValue) criteria.UpdatedBy = updatedBy.Value;
            
          return  new GLAccountType().DataPortal_Fetch(criteria);
           
        }

        public static void DeleteGLAccountType(System.Int32 gLAccountTypeID)
        {
            var criteria = new GLAccountTypeCriteria {GLAccountTypeID = gLAccountTypeID};
            
            
             new GLAccountType().DataPortal_Delete(criteria);
        }

        #endregion
 

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccountType"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountTypeCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(GLAccountTypeCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccountType"/> object has been fetched. 
        /// </summary>    
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);
 
        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccountType"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccountType"/> object has been inserted. 
        /// </summary>
        partial void OnInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccountType"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccountType"/> object has been deleted. 
        /// </summary>
        partial void OnSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountTypeCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(GLAccountTypeCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccountType"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
        #region ChildPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccountType"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountTypeCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(GLAccountTypeCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccountType"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccountType"/> object has been mapped. 
        /// </summary>
        //partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="GLAccountType"/> object. 
        /// </summary>
        partial void OnChildInserting(ApplicationUser applicationUser, GLEntityType gLEntityType, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccountType"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="GLAccountType"/> object. 
        /// </summary>
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildUpdating(ApplicationUser applicationUser, GLEntityType gLEntityType, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccountType"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccountType"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountTypeCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        //partial void OnDeleting(GLAccountTypeCriteria criteria, ref bool cancel);
        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="GLAccountType"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountTypeCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(GLAccountTypeCriteria criteria, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccountType"/> object with the specified criteria has been deleted. 
        /// </summary>
        //partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
   

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the GLAccountType table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="GLAccountType"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static GLAccountType Exists(GLAccountTypeCriteria criteria)
        {
			try
			{
					
				return new GLAccountType().DataPortal_Fetch(criteria);
			}
			catch(Exception ex)
			{
			}
			return null;
			
        }

        
        #endregion

    }
}