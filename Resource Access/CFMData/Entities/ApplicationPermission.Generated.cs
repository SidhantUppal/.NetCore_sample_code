//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'ApplicationPermission.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace CFMData
{
    [Serializable]
    public partial class ApplicationPermission 
    {
        #region Contructor(s)

        public ApplicationPermission()
        { /* Require use of factory methods */ }

        #endregion

			public ApplicationPermission  Save()
      {
        if (this.IsNew)
        {
            DataPortal_Insert();
			this.IsNew=false;
        }
        else
        {
            DataPortal_Update();
        }

        return this;
      }
	  
			public bool IsDirty=false;
			public bool IsNew=true;
			#region Properties
		
			private ApplicationPermissionDTO _currentDto = null;
			public ApplicationPermissionDTO CurrentDTO
			{
				get { return _currentDto; }
				set { _currentDto = value; }
			}

			private System.Int32 _applicationPermissionIDProperty  ;
			public System.Int32 ApplicationPermissionID
			{
				get { return _applicationPermissionIDProperty; }
				set
				{ 
                 
					if (_applicationPermissionIDProperty != value){
						IsDirty = true;
					}
					_applicationPermissionIDProperty=value; 
				}
			}

			private System.Int32? _applicationRoleIDProperty  = null;
			public System.Int32? ApplicationRoleID
			{
				get { return _applicationRoleIDProperty; }
				set
				{ 
                 
					if (_applicationRoleIDProperty != value){
						IsDirty = true;
					}
					_applicationRoleIDProperty=value; 
				}
			}

			private System.Int32? _applicationUserIDProperty  = null;
			public System.Int32? ApplicationUserID
			{
				get { return _applicationUserIDProperty; }
				set
				{ 
                 
					if (_applicationUserIDProperty != value){
						IsDirty = true;
					}
					_applicationUserIDProperty=value; 
				}
			}

			private System.Int32? _businessAreaIDProperty  = null;
			public System.Int32? BusinessAreaID
			{
				get { return _businessAreaIDProperty; }
				set
				{ 
                 
					if (_businessAreaIDProperty != value){
						IsDirty = true;
					}
					_businessAreaIDProperty=value; 
				}
			}

			private System.Int32? _businessDivisionIDProperty  = null;
			public System.Int32? BusinessDivisionID
			{
				get { return _businessDivisionIDProperty; }
				set
				{ 
                 
					if (_businessDivisionIDProperty != value){
						IsDirty = true;
					}
					_businessDivisionIDProperty=value; 
				}
			}

			private System.Int32? _businessEntityIDProperty  = null;
			public System.Int32? BusinessEntityID
			{
				get { return _businessEntityIDProperty; }
				set
				{ 
                 
					if (_businessEntityIDProperty != value){
						IsDirty = true;
					}
					_businessEntityIDProperty=value; 
				}
			}

			private System.Int32? _homeIDProperty  = null;
			public System.Int32? HomeID
			{
				get { return _homeIDProperty; }
				set
				{ 
                 
					if (_homeIDProperty != value){
						IsDirty = true;
					}
					_homeIDProperty=value; 
				}
			}

			private System.Int32? _clientIDProperty  = null;
			public System.Int32? ClientID
			{
				get { return _clientIDProperty; }
				set
				{ 
                 
					if (_clientIDProperty != value){
						IsDirty = true;
					}
					_clientIDProperty=value; 
				}
			}

			private System.Boolean _isActiveProperty  ;
			public System.Boolean IsActive
			{
				get { return _isActiveProperty; }
				set
				{ 
                 
					if (_isActiveProperty != value){
						IsDirty = true;
					}
					_isActiveProperty=value; 
				}
			}

			private System.Int32 _createdByProperty  ;
			public System.Int32 CreatedBy
			{
				get { return _createdByProperty; }
				set
				{ 
                 
					if (_createdByProperty != value){
						IsDirty = true;
					}
					_createdByProperty=value; 
				}
			}

			private System.DateTime _createdOnProperty  ;
			public System.DateTime CreatedOn
			{
				get { return _createdOnProperty; }
				set
				{ 
                 
					if (_createdOnProperty != value){
						IsDirty = true;
					}
					_createdOnProperty=value; 
				}
			}

			private System.Int32? _updatedByProperty  = null;
			public System.Int32? UpdatedBy
			{
				get { return _updatedByProperty; }
				set
				{ 
                 
					if (_updatedByProperty != value){
						IsDirty = true;
					}
					_updatedByProperty=value; 
				}
			}

			private System.DateTime? _updatedOnProperty  = null;
			public System.DateTime? UpdatedOn
			{
				get { return _updatedOnProperty; }
				set
				{ 
                 
					if (_updatedOnProperty != value){
						IsDirty = true;
					}
					_updatedOnProperty=value; 
				}
			}

			// ManyToOne
			private bool _createdByApplicationUserPropertyChecked = false;
			private ApplicationUser _createdByApplicationUserProperty = null;
			public ApplicationUser CreatedByApplicationUser
			{
				get
				{
					if(!_createdByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {ApplicationUserID = CreatedBy};
						
						_createdByApplicationUserPropertyChecked=true;                       
						_createdByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(CreatedBy);
					}                
					return _createdByApplicationUserProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _updatedByApplicationUserPropertyChecked = false;
			private ApplicationUser _updatedByApplicationUserProperty = null;
			public ApplicationUser UpdatedByApplicationUser
			{
				get
				{
                    if(!UpdatedBy.HasValue) 
					return null;

					if(!_updatedByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {};
						if(UpdatedBy.HasValue) criteria.ApplicationUserID = UpdatedBy.Value;
						_updatedByApplicationUserPropertyChecked=true;                       
						_updatedByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(UpdatedBy.Value);
					}                
					return _updatedByApplicationUserProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _businessAreaPropertyChecked = false;
			private BusinessArea _businessAreaProperty = null;
			public BusinessArea BusinessArea
			{
				get
				{
                    if(!BusinessAreaID.HasValue) 
					return null;

					if(!_businessAreaPropertyChecked)
					{						
						var criteria = new CFMData.BusinessAreaCriteria {};
						if(BusinessAreaID.HasValue) criteria.BusinessAreaID = BusinessAreaID.Value;
						_businessAreaPropertyChecked=true;                       
						_businessAreaProperty= CFMData.BusinessArea.GetByBusinessAreaID(BusinessAreaID.Value);
					}                
					return _businessAreaProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _businessDivisionPropertyChecked = false;
			private BusinessDivision _businessDivisionProperty = null;
			public BusinessDivision BusinessDivision
			{
				get
				{
                    if(!BusinessDivisionID.HasValue) 
					return null;

					if(!_businessDivisionPropertyChecked)
					{						
						var criteria = new CFMData.BusinessDivisionCriteria {};
						if(BusinessDivisionID.HasValue) criteria.BusinessDivisionID = BusinessDivisionID.Value;
						_businessDivisionPropertyChecked=true;                       
						_businessDivisionProperty= CFMData.BusinessDivision.GetByBusinessDivisionID(BusinessDivisionID.Value);
					}                
					return _businessDivisionProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _businessEntityPropertyChecked = false;
			private BusinessEntity _businessEntityProperty = null;
			public BusinessEntity BusinessEntity
			{
				get
				{
                    if(!BusinessEntityID.HasValue) 
					return null;

					if(!_businessEntityPropertyChecked)
					{						
						var criteria = new CFMData.BusinessEntityCriteria {};
						if(BusinessEntityID.HasValue) criteria.BusinessEntityID = BusinessEntityID.Value;
						_businessEntityPropertyChecked=true;                       
						_businessEntityProperty= CFMData.BusinessEntity.GetByBusinessEntityID(BusinessEntityID.Value);
					}                
					return _businessEntityProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _clientPropertyChecked = false;
			private Client _clientProperty = null;
			public Client Client
			{
				get
				{
                    if(!ClientID.HasValue) 
					return null;

					if(!_clientPropertyChecked)
					{						
						var criteria = new CFMData.ClientCriteria {};
						if(ClientID.HasValue) criteria.ClientID = ClientID.Value;
						_clientPropertyChecked=true;                       
						_clientProperty= CFMData.Client.GetByClientID(ClientID.Value);
					}                
					return _clientProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _homePropertyChecked = false;
			private Home _homeProperty = null;
			public Home Home
			{
				get
				{
                    if(!HomeID.HasValue) 
					return null;

					if(!_homePropertyChecked)
					{						
						var criteria = new CFMData.HomeCriteria {};
						if(HomeID.HasValue) criteria.HomeID = HomeID.Value;
						_homePropertyChecked=true;                       
						_homeProperty= CFMData.Home.GetByHomeID(HomeID.Value);
					}                
					return _homeProperty;
				}
			}


        #endregion
		public bool IsChildDirty()
		{
		
		


			return false;
		}

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="ApplicationPermission"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="ApplicationPermission"/>.</returns>    
        public static ApplicationPermission NewApplicationPermission()
        {
            ApplicationPermission obj=new ApplicationPermission();

            return obj;
        }

			public static ApplicationPermission GetApplicationPermission(Func<IDataReader, ApplicationPermission> rowParser,SqlDataReader reader)
			{
				ApplicationPermission obj = rowParser(reader);
				obj.InitDTO();					
				obj.IsDirty = false;
				obj.IsNew = false;
				return obj;
			}
        
 

        /// <summary>
        /// Returns a <see cref="ApplicationPermission"/> object of the specified criteria. 
        /// </summary>
        /// <param name="applicationPermissionID">No additional detail available.</param>
        /// <returns>A <see cref="ApplicationPermission"/> object of the specified criteria.</returns>
        public static ApplicationPermission GetByApplicationPermissionID(System.Int32 applicationPermissionID)
        {
            var criteria = new ApplicationPermissionCriteria {ApplicationPermissionID = applicationPermissionID};
            
            
          return  new ApplicationPermission().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="ApplicationPermission"/> object of the specified criteria. 
        /// </summary>
        /// <param name="createdBy">No additional detail available.</param>
        /// <returns>A <see cref="ApplicationPermission"/> object of the specified criteria.</returns>
        public static ApplicationPermission GetByCreatedBy(System.Int32 createdBy)
        {
            var criteria = new ApplicationPermissionCriteria {CreatedBy = createdBy};
            
            
          return  new ApplicationPermission().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="ApplicationPermission"/> object of the specified criteria. 
        /// </summary>
        /// <param name="updatedBy">No additional detail available.</param>
        /// <returns>A <see cref="ApplicationPermission"/> object of the specified criteria.</returns>
        public static ApplicationPermission GetByUpdatedBy(System.Int32? updatedBy)
        {
            var criteria = new ApplicationPermissionCriteria {};
                            if(updatedBy.HasValue) criteria.UpdatedBy = updatedBy.Value;
            
          return  new ApplicationPermission().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="ApplicationPermission"/> object of the specified criteria. 
        /// </summary>
        /// <param name="businessAreaID">No additional detail available.</param>
        /// <returns>A <see cref="ApplicationPermission"/> object of the specified criteria.</returns>
        public static ApplicationPermission GetByBusinessAreaID(System.Int32? businessAreaID)
        {
            var criteria = new ApplicationPermissionCriteria {};
                            if(businessAreaID.HasValue) criteria.BusinessAreaID = businessAreaID.Value;
            
          return  new ApplicationPermission().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="ApplicationPermission"/> object of the specified criteria. 
        /// </summary>
        /// <param name="businessDivisionID">No additional detail available.</param>
        /// <returns>A <see cref="ApplicationPermission"/> object of the specified criteria.</returns>
        public static ApplicationPermission GetByBusinessDivisionID(System.Int32? businessDivisionID)
        {
            var criteria = new ApplicationPermissionCriteria {};
                            if(businessDivisionID.HasValue) criteria.BusinessDivisionID = businessDivisionID.Value;
            
          return  new ApplicationPermission().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="ApplicationPermission"/> object of the specified criteria. 
        /// </summary>
        /// <param name="businessEntityID">No additional detail available.</param>
        /// <returns>A <see cref="ApplicationPermission"/> object of the specified criteria.</returns>
        public static ApplicationPermission GetByBusinessEntityID(System.Int32? businessEntityID)
        {
            var criteria = new ApplicationPermissionCriteria {};
                            if(businessEntityID.HasValue) criteria.BusinessEntityID = businessEntityID.Value;
            
          return  new ApplicationPermission().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="ApplicationPermission"/> object of the specified criteria. 
        /// </summary>
        /// <param name="clientID">No additional detail available.</param>
        /// <returns>A <see cref="ApplicationPermission"/> object of the specified criteria.</returns>
        public static ApplicationPermission GetByClientID(System.Int32? clientID)
        {
            var criteria = new ApplicationPermissionCriteria {};
                            if(clientID.HasValue) criteria.ClientID = clientID.Value;
            
          return  new ApplicationPermission().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="ApplicationPermission"/> object of the specified criteria. 
        /// </summary>
        /// <param name="homeID">No additional detail available.</param>
        /// <returns>A <see cref="ApplicationPermission"/> object of the specified criteria.</returns>
        public static ApplicationPermission GetByHomeID(System.Int32? homeID)
        {
            var criteria = new ApplicationPermissionCriteria {};
                            if(homeID.HasValue) criteria.HomeID = homeID.Value;
            
          return  new ApplicationPermission().DataPortal_Fetch(criteria);
           
        }

        public static void DeleteApplicationPermission(System.Int32 applicationPermissionID)
        {
            var criteria = new ApplicationPermissionCriteria {ApplicationPermissionID = applicationPermissionID};
            
            
             new ApplicationPermission().DataPortal_Delete(criteria);
        }

        #endregion
 

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="ApplicationPermission"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="ApplicationPermissionCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(ApplicationPermissionCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="ApplicationPermission"/> object has been fetched. 
        /// </summary>    
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);
 
        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="ApplicationPermission"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="ApplicationPermission"/> object has been inserted. 
        /// </summary>
        partial void OnInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="ApplicationPermission"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="ApplicationPermission"/> object has been deleted. 
        /// </summary>
        partial void OnSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="ApplicationPermissionCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(ApplicationPermissionCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="ApplicationPermission"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
        #region ChildPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="ApplicationPermission"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="ApplicationPermissionCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(ApplicationPermissionCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="ApplicationPermission"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="ApplicationPermission"/> object has been mapped. 
        /// </summary>
        //partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        partial void OnChildInserting(ApplicationUser applicationUser, BusinessArea businessArea, BusinessDivision businessDivision, BusinessEntity businessEntity, Client client, Home home, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="ApplicationPermission"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildUpdating(ApplicationUser applicationUser, BusinessArea businessArea, BusinessDivision businessDivision, BusinessEntity businessEntity, Client client, Home home, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="ApplicationPermission"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="ApplicationPermission"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="ApplicationPermissionCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        //partial void OnDeleting(ApplicationPermissionCriteria criteria, ref bool cancel);
        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="ApplicationPermission"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="ApplicationPermissionCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(ApplicationPermissionCriteria criteria, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="ApplicationPermission"/> object with the specified criteria has been deleted. 
        /// </summary>
        //partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
   

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the ApplicationPermission table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="ApplicationPermission"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static ApplicationPermission Exists(ApplicationPermissionCriteria criteria)
        {
			try
			{
					
				return new ApplicationPermission().DataPortal_Fetch(criteria);
			}
			catch(Exception ex)
			{
			}
			return null;
			
        }

        
        #endregion

    }
}