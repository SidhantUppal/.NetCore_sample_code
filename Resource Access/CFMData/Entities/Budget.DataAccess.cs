//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Budget.cs'.
//
//     Template: EditableRoot.DataAccess.StoredProcedures.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
 using Dapper;

namespace CFMData
{
	public partial class Budget
	{
    
		private Budget DataPortal_Fetch(BudgetCriteria criteria)
		{
 
			bool cancel = false;
			OnFetching(criteria, ref cancel);
			if (cancel) return null;
			using (var connection = new SqlConnection(ADOHelper.ConnectionString))
			{
				connection.Open();
				using (var command = new SqlCommand("[dbo].[spCFM_Budget_Select]", connection))
				{
					command.CommandType = CommandType.StoredProcedure;
					command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    command.Parameters.AddWithValue("@p_ClientIDHasValue", criteria.ClientIDHasValue);
                command.Parameters.AddWithValue("@p_HomeIDHasValue", criteria.HomeIDHasValue);
                command.Parameters.AddWithValue("@p_TemplateNameHasValue", criteria.TemplateNameHasValue);
                command.Parameters.AddWithValue("@p_UpdatedByHasValue", criteria.UpdatedByHasValue);
                command.Parameters.AddWithValue("@p_UpdatedOnHasValue", criteria.UpdatedOnHasValue);
					using(var reader = command.ExecuteReader())
					{
						var rowParser = reader.GetRowParser<Budget>();                       
						if(reader.Read())
						{
							return GetBudget(rowParser, reader);							
						}                            
						else
							throw new Exception(String.Format("The record was not found in 'dbo.Budget' using the following criteria: {0}.", criteria));
					}
				}
			}
			OnFetched();
		}

       // [Transactional(TransactionalTypes.TransactionScope)]
		protected   void DataPortal_Insert()
		{
			bool cancel = false;
			OnInserting(ref cancel);
			if (cancel) return;
			using (var connection = new SqlConnection(ADOHelper.ConnectionString))
			{
				connection.Open();
				SqlTransaction trans = connection.BeginTransaction();
				try
				{
				
				using(var command = new SqlCommand("[dbo].[spCFM_Budget_Insert]", connection,trans))
				{
					command.CommandType = CommandType.StoredProcedure;
					
          command.Parameters.AddWithValue("@p_BudgetID", this.BudgetID);
                command.Parameters["@p_BudgetID"].Direction = ParameterDirection.Output;
                command.Parameters.AddWithValue("@p_BudgetTypeID", this.BudgetTypeID);
                command.Parameters.AddWithValue("@p_ClientID", ADOHelper.NullCheck(this.ClientID));
                command.Parameters.AddWithValue("@p_HomeID", ADOHelper.NullCheck(this.HomeID));
                command.Parameters.AddWithValue("@p_BudgetCode", this.BudgetCode);
                command.Parameters.AddWithValue("@p_EffectiveDate", this.EffectiveDate);
                command.Parameters.AddWithValue("@p_TemplateName", ADOHelper.NullCheck(this.TemplateName));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_CreatedBy", this.CreatedBy);
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_EnteredMonthly", this.EnteredMonthly);
                command.Parameters.AddWithValue("@p_ScopeContribution", this.ScopeContribution);
                command.Parameters.AddWithValue("@p_NumberOfBeds", this.NumberOfBeds);
                command.Parameters.AddWithValue("@p_Vacancies", this.Vacancies);
					command.ExecuteNonQuery();                  
					_budgetIDProperty=(System.Int32)command.Parameters["@p_BudgetID"].Value;
                    
				}
                
				UpdateChildren(this, connection,trans);
				
				trans.Commit();
			}
			catch(Exception ex)
			{
				trans.Rollback();
				throw;
			}
			
		}
			

			OnInserted();

		}

       // [Transactional(TransactionalTypes.TransactionScope)]
		protected   void DataPortal_Update()
		{
			bool cancel = false;
			OnUpdating(ref cancel);
			if (cancel) return;
			using (var connection = new SqlConnection(ADOHelper.ConnectionString))
			{
				connection.Open();
				SqlTransaction trans = connection.BeginTransaction();
				try
				{
				using(var command = new SqlCommand("[dbo].[spCFM_Budget_Update]", connection,trans))
				{
					command.CommandType = CommandType.StoredProcedure;
					command.Parameters.AddWithValue("@p_BudgetID", this.BudgetID);
                command.Parameters.AddWithValue("@p_BudgetTypeID", this.BudgetTypeID);
                command.Parameters.AddWithValue("@p_ClientID", ADOHelper.NullCheck(this.ClientID));
                command.Parameters.AddWithValue("@p_HomeID", ADOHelper.NullCheck(this.HomeID));
                command.Parameters.AddWithValue("@p_BudgetCode", this.BudgetCode);
                command.Parameters.AddWithValue("@p_EffectiveDate", this.EffectiveDate);
                command.Parameters.AddWithValue("@p_TemplateName", ADOHelper.NullCheck(this.TemplateName));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_CreatedBy", this.CreatedBy);
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_EnteredMonthly", this.EnteredMonthly);
                command.Parameters.AddWithValue("@p_ScopeContribution", this.ScopeContribution);
                command.Parameters.AddWithValue("@p_NumberOfBeds", this.NumberOfBeds);
                command.Parameters.AddWithValue("@p_Vacancies", this.Vacancies);
					//result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
					int result = command.ExecuteNonQuery();
					if (result == 0)
						throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

				}
				UpdateChildren(this, connection,trans);
				//FieldManager.UpdateChildren(this, connection);
				trans.Commit();
			}
			catch(Exception ex)
			{
				trans.Rollback();
				throw;
			}
			
		}

			OnUpdated();
		}
		protected   void UpdateChildren(Budget parent,SqlConnection connection,SqlTransaction trans)
		{
		
		
			
			if(_budgetApprovalsPropertyChecked )
			{
				if(_budgetApprovalsProperty!=null)
				{
				
					foreach (BudgetApproval obj in _budgetApprovalsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_budgetClientAdjustmentsPropertyChecked )
			{
				if(_budgetClientAdjustmentsProperty!=null)
				{
				
					foreach (BudgetClientAdjustment obj in _budgetClientAdjustmentsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_budgetLinesPropertyChecked )
			{
				if(_budgetLinesProperty!=null)
				{
				
					foreach (BudgetLine obj in _budgetLinesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_houseBudgetGlsPropertyChecked )
			{
				if(_houseBudgetGlsProperty!=null)
				{
				
					foreach (Gl obj in _houseBudgetGlsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_clientBudgetGlsPropertyChecked )
			{
				if(_clientBudgetGlsProperty!=null)
				{
				
					foreach (Gl obj in _clientBudgetGlsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}


		}

		protected   void DataPortal_DeleteSelf()
		{
			bool cancel = false;
			OnSelfDeleting(ref cancel);
			if (cancel) return;            
			DataPortal_Delete(new BudgetCriteria (BudgetID));        
			OnSelfDeleted();
		}
        
		//[Transactional(TransactionalTypes.TransactionScope)]
		protected void DataPortal_Delete(BudgetCriteria criteria)
		{
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("[dbo].[spCFM_Budget_Delete]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
		
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
		}
		
		 #region Child_Insert
        /// <summary>
        /// Inserts data into the data base using the information in the current 
        ///    CSLA editable child business object of type <see cref="Budget"/> 
        /// </summary>
        /// <returns></returns>
        public void Child_Insert(SqlConnection connection,SqlTransaction trans)
        {
            bool cancel = false;
            OnChildInserting(connection, ref cancel,trans);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("[dbo].[spCFM_Budget_Insert]", connection,trans))
            {
                command.CommandType = CommandType.StoredProcedure;
		
                command.Parameters.AddWithValue("@p_BudgetID", this.BudgetID);
                command.Parameters["@p_BudgetID"].Direction = ParameterDirection.Output;
                command.Parameters.AddWithValue("@p_BudgetTypeID", this.BudgetTypeID);
                command.Parameters.AddWithValue("@p_ClientID", ADOHelper.NullCheck(this.ClientID));
                command.Parameters.AddWithValue("@p_HomeID", ADOHelper.NullCheck(this.HomeID));
                command.Parameters.AddWithValue("@p_BudgetCode", this.BudgetCode);
                command.Parameters.AddWithValue("@p_EffectiveDate", this.EffectiveDate);
                command.Parameters.AddWithValue("@p_TemplateName", ADOHelper.NullCheck(this.TemplateName));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_CreatedBy", this.CreatedBy);
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_EnteredMonthly", this.EnteredMonthly);
                command.Parameters.AddWithValue("@p_ScopeContribution", this.ScopeContribution);
                command.Parameters.AddWithValue("@p_NumberOfBeds", this.NumberOfBeds);
                command.Parameters.AddWithValue("@p_Vacancies", this.Vacancies);

                command.ExecuteNonQuery();
               
                // Update identity primary key value.
                _budgetIDProperty=(System.Int32)command.Parameters["@p_BudgetID"].Value;
            }

            UpdateChildren(this, connection,trans);

            OnChildInserted();
        }

        public void Child_Insert(ApplicationUser applicationUser, SqlConnection connection,SqlTransaction trans)
        {
            Child_Insert(applicationUser, null, null, null, connection,trans);
        }


        public void Child_Insert(BudgetType budgetType, SqlConnection connection,SqlTransaction trans)
        {
            Child_Insert(null, budgetType, null, null, connection,trans);
        }


        public void Child_Insert(Client client, SqlConnection connection,SqlTransaction trans)
        {
            Child_Insert(null, null, client, null, connection,trans);
        }


        public void Child_Insert(Home home, SqlConnection connection,SqlTransaction trans)
        {
            Child_Insert(null, null, null, home, connection,trans);
        }


        public void Child_Insert(ApplicationUser applicationUser, BudgetType budgetType, Client client, Home home, SqlConnection connection,SqlTransaction trans)
        {
            bool cancel = false;
            OnChildInserting(applicationUser, budgetType, client, home, connection, ref cancel,trans);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("[dbo].[spCFM_Budget_Insert]", connection,trans))
            {
                command.CommandType = CommandType.StoredProcedure;
		
                command.Parameters.AddWithValue("@p_BudgetID", this.BudgetID);
                command.Parameters["@p_BudgetID"].Direction = ParameterDirection.Output;
                command.Parameters.AddWithValue("@p_BudgetTypeID", budgetType != null ? budgetType.BudgetTypeID : this.BudgetTypeID);
                command.Parameters.AddWithValue("@p_ClientID", ADOHelper.NullCheck(client != null ? client.ClientID : this.ClientID));
                command.Parameters.AddWithValue("@p_HomeID", ADOHelper.NullCheck(home != null ? home.HomeID : this.HomeID));
                command.Parameters.AddWithValue("@p_BudgetCode", this.BudgetCode);
                command.Parameters.AddWithValue("@p_EffectiveDate", this.EffectiveDate);
                command.Parameters.AddWithValue("@p_TemplateName", ADOHelper.NullCheck(this.TemplateName));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_CreatedBy", applicationUser != null ? applicationUser.ApplicationUserID : this.CreatedBy);
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(applicationUser != null ? applicationUser.ApplicationUserID : this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_EnteredMonthly", this.EnteredMonthly);
                command.Parameters.AddWithValue("@p_ScopeContribution", this.ScopeContribution);
                command.Parameters.AddWithValue("@p_NumberOfBeds", this.NumberOfBeds);
                command.Parameters.AddWithValue("@p_Vacancies", this.Vacancies);

                command.ExecuteNonQuery();
               
                // Update identity primary key value.
                _budgetIDProperty=(System.Int32)command.Parameters["@p_BudgetID"].Value;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(budgetType != null && budgetType.BudgetTypeID != this.BudgetTypeID)
                _budgetTypeIDProperty= budgetType.BudgetTypeID;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(client != null && client.ClientID != this.ClientID)
                _clientIDProperty= client.ClientID;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(home != null && home.HomeID != this.HomeID)
                _homeIDProperty= home.HomeID;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(applicationUser != null && applicationUser.ApplicationUserID != this.CreatedBy)
                _createdByProperty= applicationUser.ApplicationUserID;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(applicationUser != null && applicationUser.ApplicationUserID != this.UpdatedBy)
                _updatedByProperty= applicationUser.ApplicationUserID;
            }
            
            // A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            // TODO: Please override OnChildInserted() and insert this child manually.
            // UpdateChildren(this, null, null, null, null, null, null, null, null, null, connection);

            OnChildInserted();
        }

        #endregion

        #region Child_Update

        /// <summary>
        /// Updates the corresponding record in the data base with the information in the current 
        ///    CSLA editable child business object of type <see cref="Budget"/> 
        /// </summary>
        /// <returns></returns>
        public void Child_Update(SqlConnection connection,SqlTransaction trans)
        {
            bool cancel = false;
            OnChildUpdating(connection, ref cancel,trans);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("[dbo].[spCFM_Budget_Update]", connection,trans))
            {
                command.CommandType = CommandType.StoredProcedure;
		
                command.Parameters.AddWithValue("@p_BudgetID", this.BudgetID);
                command.Parameters.AddWithValue("@p_BudgetTypeID", this.BudgetTypeID);
                command.Parameters.AddWithValue("@p_ClientID", ADOHelper.NullCheck(this.ClientID));
                command.Parameters.AddWithValue("@p_HomeID", ADOHelper.NullCheck(this.HomeID));
                command.Parameters.AddWithValue("@p_BudgetCode", this.BudgetCode);
                command.Parameters.AddWithValue("@p_EffectiveDate", this.EffectiveDate);
                command.Parameters.AddWithValue("@p_TemplateName", ADOHelper.NullCheck(this.TemplateName));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_CreatedBy", this.CreatedBy);
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_EnteredMonthly", this.EnteredMonthly);
                command.Parameters.AddWithValue("@p_ScopeContribution", this.ScopeContribution);
                command.Parameters.AddWithValue("@p_NumberOfBeds", this.NumberOfBeds);
                command.Parameters.AddWithValue("@p_Vacancies", this.Vacancies);

                //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                int result = command.ExecuteNonQuery();
                if (result == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
            }

            UpdateChildren(this, connection,trans);

            OnChildUpdated();
        }

        public void Child_Update(ApplicationUser applicationUser, SqlConnection connection,SqlTransaction trans)
        {
            Child_Update(applicationUser, null, null, null, connection,trans);
        }


        public void Child_Update(BudgetType budgetType, SqlConnection connection,SqlTransaction trans)
        {
            Child_Update(null, budgetType, null, null, connection,trans);
        }


        public void Child_Update(Client client, SqlConnection connection,SqlTransaction trans)
        {
            Child_Update(null, null, client, null, connection,trans);
        }


        public void Child_Update(Home home, SqlConnection connection,SqlTransaction trans)
        {
            Child_Update(null, null, null, home, connection,trans);
        }

 
        public void Child_Update(ApplicationUser applicationUser, BudgetType budgetType, Client client, Home home, SqlConnection connection,SqlTransaction trans)
        {
            bool cancel = false;
            OnChildUpdating(applicationUser, budgetType, client, home, connection, ref cancel,trans);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("[dbo].[spCFM_Budget_Update]", connection,trans))
            {
                command.CommandType = CommandType.StoredProcedure;
		
                command.Parameters.AddWithValue("@p_BudgetID", this.BudgetID);
                command.Parameters.AddWithValue("@p_BudgetTypeID", budgetType != null ? budgetType.BudgetTypeID : this.BudgetTypeID);
                command.Parameters.AddWithValue("@p_ClientID", ADOHelper.NullCheck(client != null ? client.ClientID : this.ClientID));
                command.Parameters.AddWithValue("@p_HomeID", ADOHelper.NullCheck(home != null ? home.HomeID : this.HomeID));
                command.Parameters.AddWithValue("@p_BudgetCode", this.BudgetCode);
                command.Parameters.AddWithValue("@p_EffectiveDate", this.EffectiveDate);
                command.Parameters.AddWithValue("@p_TemplateName", ADOHelper.NullCheck(this.TemplateName));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_CreatedBy", applicationUser != null ? applicationUser.ApplicationUserID : this.CreatedBy);
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(applicationUser != null ? applicationUser.ApplicationUserID : this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_EnteredMonthly", this.EnteredMonthly);
                command.Parameters.AddWithValue("@p_ScopeContribution", this.ScopeContribution);
                command.Parameters.AddWithValue("@p_NumberOfBeds", this.NumberOfBeds);
                command.Parameters.AddWithValue("@p_Vacancies", this.Vacancies);

                //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                int result = command.ExecuteNonQuery();
                if (result == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(budgetType != null && budgetType.BudgetTypeID != this.BudgetTypeID)
                    _budgetTypeIDProperty= budgetType.BudgetTypeID;

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(client != null && client.ClientID != this.ClientID)
                    _clientIDProperty= client.ClientID;

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(home != null && home.HomeID != this.HomeID)
                    _homeIDProperty= home.HomeID;

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(applicationUser != null && applicationUser.ApplicationUserID != this.CreatedBy)
                    _createdByProperty= applicationUser.ApplicationUserID;

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(applicationUser != null && applicationUser.ApplicationUserID != this.UpdatedBy)
                    _updatedByProperty= applicationUser.ApplicationUserID;
            }
            
            // A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            // TODO: Please override OnChildUpdated() and update this child manually.
            // UpdateChildren(this, null, null, null, null, null, null, null, null, null, connection);

            OnChildUpdated();
        }
        #endregion

        /// <summary>
        /// Deletes the corresponding record in the data base with the information in the current 
        ///    CSLA editable child business object of type <see cref="Budget"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_DeleteSelf(SqlConnection connection)
        {
            bool cancel = false;
            OnChildSelfDeleting(connection, ref cancel);
            if (cancel) return;
            
            //DataPortal_Delete(new BudgetCriteria (BudgetID), connection);
        
            OnChildSelfDeleted();
        }

        #region Map
		public void InitDTO()
		{
			  BudgetDTO dt=new BudgetDTO();
			dt.BudgetID =this.BudgetID ;
			dt.BudgetTypeID =this.BudgetTypeID ;
			dt.ClientID =this.ClientID ;
			dt.HomeID =this.HomeID ;
			dt.BudgetCode =this.BudgetCode ;
			dt.EffectiveDate =this.EffectiveDate ;
			dt.TemplateName =this.TemplateName ;
			dt.IsActive =this.IsActive ;
			dt.CreatedBy =this.CreatedBy ;
			dt.CreatedOn =this.CreatedOn ;
			dt.UpdatedBy =this.UpdatedBy ;
			dt.UpdatedOn =this.UpdatedOn ;
			dt.EnteredMonthly =this.EnteredMonthly ;
			dt.ScopeContribution =this.ScopeContribution ;
			dt.NumberOfBeds =this.NumberOfBeds ;
			dt.Vacancies =this.Vacancies ;
   //LoadProperty(_currentDto, dt);
  this.CurrentDTO = dt;

		}
		/*
        private void Map(SafeDataReader reader)
        {
            bool cancel = false;
            OnMapping(reader, ref cancel);
            if (cancel) return;

            using(BypassPropertyChecks)
            {
                LoadProperty(_budgetIDProperty, reader["BudgetID"]);
                LoadProperty(_budgetTypeIDProperty, reader["BudgetTypeID"]);
                LoadProperty(_clientIDProperty, reader["ClientID"]);
                LoadProperty(_homeIDProperty, reader["HomeID"]);
                LoadProperty(_budgetCodeProperty, reader["BudgetCode"]);
                LoadProperty(_effectiveDateProperty, reader["EffectiveDate"]);
                LoadProperty(_templateNameProperty, reader["TemplateName"]);
                LoadProperty(_isActiveProperty, reader["IsActive"]);
                LoadProperty(_createdByProperty, reader["CreatedBy"]);
                LoadProperty(_createdOnProperty, reader["CreatedOn"]);
                LoadProperty(_updatedByProperty, reader["UpdatedBy"]);
                LoadProperty(_updatedOnProperty, reader["UpdatedOn"]);
                LoadProperty(_enteredMonthlyProperty, reader["EnteredMonthly"]);
                LoadProperty(_scopeContributionProperty, reader["ScopeContribution"]);
                LoadProperty(_numberOfBedsProperty, reader["NumberOfBeds"]);
                LoadProperty(_vacanciesProperty, reader["Vacancies"]);
            }	
			InitDTO();
            OnMapped();
        }
        
        private void Child_Fetch(SafeDataReader reader)
        {
            Map(reader);
        }
		*/

        #endregion
	}
}
 