//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Gl.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace CFMData
{
    [Serializable]
    public partial class Gl 
    {
        #region Contructor(s)

        public Gl()
        { /* Require use of factory methods */ }

        #endregion

			public Gl  Save()
      {
        if (this.IsNew)
        {
            DataPortal_Insert();
			this.IsNew=false;
        }
        else
        {
            DataPortal_Update();
        }

        return this;
      }
	  
			public bool IsDirty=false;
			public bool IsNew=true;
			#region Properties
		
			private GlDTO _currentDto = null;
			public GlDTO CurrentDTO
			{
				get { return _currentDto; }
				set { _currentDto = value; }
			}

			private System.Int32 _glidProperty  ;
			public System.Int32 Glid
			{
				get { return _glidProperty; }
				set
				{ 
                 
					if (_glidProperty != value){
						IsDirty = true;
					}
					_glidProperty=value; 
				}
			}
			public System.Int32 GLID
			{
				get { return _glidProperty; }
				set
				{ 
                 
					if (_glidProperty != value){
						IsDirty = true;
					}
					_glidProperty=value; 
				}
			}

			private System.DateTime _journalDateProperty  ;
			public System.DateTime JournalDate
			{
				get { return _journalDateProperty; }
				set
				{ 
                 
					if (_journalDateProperty != value){
						IsDirty = true;
					}
					_journalDateProperty=value; 
				}
			}

			private System.DateTime? _postingDateProperty  = null;
			public System.DateTime? PostingDate
			{
				get { return _postingDateProperty; }
				set
				{ 
                 
					if (_postingDateProperty != value){
						IsDirty = true;
					}
					_postingDateProperty=value; 
				}
			}

			private System.Int32 _gLAccountIDProperty  ;
			public System.Int32 GLAccountID
			{
				get { return _gLAccountIDProperty; }
				set
				{ 
                 
					if (_gLAccountIDProperty != value){
						IsDirty = true;
					}
					_gLAccountIDProperty=value; 
				}
			}

			private System.Int32 _transactionTypeIDProperty  ;
			public System.Int32 TransactionTypeID
			{
				get { return _transactionTypeIDProperty; }
				set
				{ 
                 
					if (_transactionTypeIDProperty != value){
						IsDirty = true;
					}
					_transactionTypeIDProperty=value; 
				}
			}

			private System.Int32? _gLCostCentreEntityIDProperty  = null;
			public System.Int32? GLCostCentreEntityID
			{
				get { return _gLCostCentreEntityIDProperty; }
				set
				{ 
                 
					if (_gLCostCentreEntityIDProperty != value){
						IsDirty = true;
					}
					_gLCostCentreEntityIDProperty=value; 
				}
			}

			private System.Int32? _bankTransactionIDProperty  = null;
			public System.Int32? BankTransactionID
			{
				get { return _bankTransactionIDProperty; }
				set
				{ 
                 
					if (_bankTransactionIDProperty != value){
						IsDirty = true;
					}
					_bankTransactionIDProperty=value; 
				}
			}

			private System.Int32? _categoryIDProperty  = null;
			public System.Int32? CategoryID
			{
				get { return _categoryIDProperty; }
				set
				{ 
                 
					if (_categoryIDProperty != value){
						IsDirty = true;
					}
					_categoryIDProperty=value; 
				}
			}

			private System.Int32 _journalNumberProperty  ;
			public System.Int32 JournalNumber
			{
				get { return _journalNumberProperty; }
				set
				{ 
                 
					if (_journalNumberProperty != value){
						IsDirty = true;
					}
					_journalNumberProperty=value; 
				}
			}

			private System.String _narrationProperty  ;
			public System.String Narration
			{
				get { return _narrationProperty; }
				set
				{ 
                 
					if (_narrationProperty != value){
						IsDirty = true;
					}
					_narrationProperty=value; 
				}
			}

			private System.String _docRefProperty  ;
			public System.String DocRef
			{
				get { return _docRefProperty; }
				set
				{ 
                 
					if (_docRefProperty != value){
						IsDirty = true;
					}
					_docRefProperty=value; 
				}
			}

			private System.String _currencyCodeProperty  ;
			public System.String CurrencyCode
			{
				get { return _currencyCodeProperty; }
				set
				{ 
                 
					if (_currencyCodeProperty != value){
						IsDirty = true;
					}
					_currencyCodeProperty=value; 
				}
			}

			private System.Decimal? _exGstAMountProperty  = null;
			public System.Decimal? ExGstAMount
			{
				get { return _exGstAMountProperty; }
				set
				{ 
                 
					if (_exGstAMountProperty != value){
						IsDirty = true;
					}
					_exGstAMountProperty=value; 
				}
			}

			private System.Decimal? _gSTAmountProperty  = null;
			public System.Decimal? GSTAmount
			{
				get { return _gSTAmountProperty; }
				set
				{ 
                 
					if (_gSTAmountProperty != value){
						IsDirty = true;
					}
					_gSTAmountProperty=value; 
				}
			}

			private System.Decimal? _dRAmountProperty  = null;
			public System.Decimal? DRAmount
			{
				get { return _dRAmountProperty; }
				set
				{ 
                 
					if (_dRAmountProperty != value){
						IsDirty = true;
					}
					_dRAmountProperty=value; 
				}
			}

			private System.Decimal? _cRAmountProperty  = null;
			public System.Decimal? CRAmount
			{
				get { return _cRAmountProperty; }
				set
				{ 
                 
					if (_cRAmountProperty != value){
						IsDirty = true;
					}
					_cRAmountProperty=value; 
				}
			}

			private System.Int32? _houseBudgetIDProperty  = null;
			public System.Int32? HouseBudgetID
			{
				get { return _houseBudgetIDProperty; }
				set
				{ 
                 
					if (_houseBudgetIDProperty != value){
						IsDirty = true;
					}
					_houseBudgetIDProperty=value; 
				}
			}

			private System.Int32? _clientBudgetIDProperty  = null;
			public System.Int32? ClientBudgetID
			{
				get { return _clientBudgetIDProperty; }
				set
				{ 
                 
					if (_clientBudgetIDProperty != value){
						IsDirty = true;
					}
					_clientBudgetIDProperty=value; 
				}
			}

			private System.Boolean _isActiveProperty  ;
			public System.Boolean IsActive
			{
				get { return _isActiveProperty; }
				set
				{ 
                 
					if (_isActiveProperty != value){
						IsDirty = true;
					}
					_isActiveProperty=value; 
				}
			}

			private System.Int32 _createdByProperty  ;
			public System.Int32 CreatedBy
			{
				get { return _createdByProperty; }
				set
				{ 
                 
					if (_createdByProperty != value){
						IsDirty = true;
					}
					_createdByProperty=value; 
				}
			}

			private System.DateTime _createdOnProperty  ;
			public System.DateTime CreatedOn
			{
				get { return _createdOnProperty; }
				set
				{ 
                 
					if (_createdOnProperty != value){
						IsDirty = true;
					}
					_createdOnProperty=value; 
				}
			}

			private System.Int32? _updatedByProperty  = null;
			public System.Int32? UpdatedBy
			{
				get { return _updatedByProperty; }
				set
				{ 
                 
					if (_updatedByProperty != value){
						IsDirty = true;
					}
					_updatedByProperty=value; 
				}
			}

			private System.DateTime? _updatedOnProperty  = null;
			public System.DateTime? UpdatedOn
			{
				get { return _updatedOnProperty; }
				set
				{ 
                 
					if (_updatedOnProperty != value){
						IsDirty = true;
					}
					_updatedOnProperty=value; 
				}
			}

			// ManyToOne
			private bool _createdByApplicationUserPropertyChecked = false;
			private ApplicationUser _createdByApplicationUserProperty = null;
			public ApplicationUser CreatedByApplicationUser
			{
				get
				{
					if(!_createdByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {ApplicationUserID = CreatedBy};
						
						_createdByApplicationUserPropertyChecked=true;                       
						_createdByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(CreatedBy);
					}                
					return _createdByApplicationUserProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _bankTransactionPropertyChecked = false;
			private BankTransaction _bankTransactionProperty = null;
			public BankTransaction BankTransaction
			{
				get
				{
                    if(!BankTransactionID.HasValue) 
					return null;

					if(!_bankTransactionPropertyChecked)
					{						
						var criteria = new CFMData.BankTransactionCriteria {};
						if(BankTransactionID.HasValue) criteria.BankTransactionID = BankTransactionID.Value;
						_bankTransactionPropertyChecked=true;                       
						_bankTransactionProperty= CFMData.BankTransaction.GetByBankTransactionID(BankTransactionID.Value);
					}                
					return _bankTransactionProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _houseBudgetBudgetPropertyChecked = false;
			private Budget _houseBudgetBudgetProperty = null;
			public Budget HouseBudgetBudget
			{
				get
				{
                    if(!HouseBudgetID.HasValue) 
					return null;

					if(!_houseBudgetBudgetPropertyChecked)
					{						
						var criteria = new CFMData.BudgetCriteria {};
						if(HouseBudgetID.HasValue) criteria.BudgetID = HouseBudgetID.Value;
						_houseBudgetBudgetPropertyChecked=true;                       
						_houseBudgetBudgetProperty= CFMData.Budget.GetByBudgetID(HouseBudgetID.Value);
					}                
					return _houseBudgetBudgetProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _clientBudgetBudgetPropertyChecked = false;
			private Budget _clientBudgetBudgetProperty = null;
			public Budget ClientBudgetBudget
			{
				get
				{
                    if(!ClientBudgetID.HasValue) 
					return null;

					if(!_clientBudgetBudgetPropertyChecked)
					{						
						var criteria = new CFMData.BudgetCriteria {};
						if(ClientBudgetID.HasValue) criteria.BudgetID = ClientBudgetID.Value;
						_clientBudgetBudgetPropertyChecked=true;                       
						_clientBudgetBudgetProperty= CFMData.Budget.GetByBudgetID(ClientBudgetID.Value);
					}                
					return _clientBudgetBudgetProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _gLEntityPropertyChecked = false;
			private GLEntity _gLEntityProperty = null;
			public GLEntity GLEntity
			{
				get
				{
                    if(!GLCostCentreEntityID.HasValue) 
					return null;

					if(!_gLEntityPropertyChecked)
					{						
						var criteria = new CFMData.GLEntityCriteria {};
						if(GLCostCentreEntityID.HasValue) criteria.GLEntityID = GLCostCentreEntityID.Value;
						_gLEntityPropertyChecked=true;                       
						_gLEntityProperty= CFMData.GLEntity.GetByGLEntityID(GLCostCentreEntityID.Value);
					}                
					return _gLEntityProperty;
				}
			}

			// ManyToOne
			private bool _transactionTypePropertyChecked = false;
			private TransactionType _transactionTypeProperty = null;
			public TransactionType TransactionType
			{
				get
				{
					if(!_transactionTypePropertyChecked)
					{						
						var criteria = new CFMData.TransactionTypeCriteria {TransactionTypeID = TransactionTypeID};
						
						_transactionTypePropertyChecked=true;                       
						_transactionTypeProperty= CFMData.TransactionType.GetByTransactionTypeID(TransactionTypeID);
					}                
					return _transactionTypeProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _updatedByApplicationUserPropertyChecked = false;
			private ApplicationUser _updatedByApplicationUserProperty = null;
			public ApplicationUser UpdatedByApplicationUser
			{
				get
				{
                    if(!UpdatedBy.HasValue) 
					return null;

					if(!_updatedByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {};
						if(UpdatedBy.HasValue) criteria.ApplicationUserID = UpdatedBy.Value;
						_updatedByApplicationUserPropertyChecked=true;                       
						_updatedByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(UpdatedBy.Value);
					}                
					return _updatedByApplicationUserProperty;
				}
			}


        #endregion
		public bool IsChildDirty()
		{
		
		


			return false;
		}

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="Gl"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="Gl"/>.</returns>    
        public static Gl NewGl()
        {
            Gl obj=new Gl();

            return obj;
        }

			public static Gl GetGl(Func<IDataReader, Gl> rowParser,SqlDataReader reader)
			{
				Gl obj = rowParser(reader);
				obj.InitDTO();					
				obj.IsDirty = false;
				obj.IsNew = false;
				return obj;
			}
        
 

        /// <summary>
        /// Returns a <see cref="Gl"/> object of the specified criteria. 
        /// </summary>
        /// <param name="glid">No additional detail available.</param>
        /// <returns>A <see cref="Gl"/> object of the specified criteria.</returns>
        public static Gl GetByGlid(System.Int32 glid)
        {
            var criteria = new GlCriteria {Glid = glid};
            
            
          return  new Gl().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Gl"/> object of the specified criteria. 
        /// </summary>
        /// <param name="createdBy">No additional detail available.</param>
        /// <returns>A <see cref="Gl"/> object of the specified criteria.</returns>
        public static Gl GetByCreatedBy(System.Int32 createdBy)
        {
            var criteria = new GlCriteria {CreatedBy = createdBy};
            
            
          return  new Gl().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Gl"/> object of the specified criteria. 
        /// </summary>
        /// <param name="bankTransactionID">No additional detail available.</param>
        /// <returns>A <see cref="Gl"/> object of the specified criteria.</returns>
        public static Gl GetByBankTransactionID(System.Int32? bankTransactionID)
        {
            var criteria = new GlCriteria {};
                            if(bankTransactionID.HasValue) criteria.BankTransactionID = bankTransactionID.Value;
            
          return  new Gl().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Gl"/> object of the specified criteria. 
        /// </summary>
        /// <param name="houseBudgetID">No additional detail available.</param>
        /// <returns>A <see cref="Gl"/> object of the specified criteria.</returns>
        public static Gl GetByHouseBudgetID(System.Int32? houseBudgetID)
        {
            var criteria = new GlCriteria {};
                            if(houseBudgetID.HasValue) criteria.HouseBudgetID = houseBudgetID.Value;
            
          return  new Gl().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Gl"/> object of the specified criteria. 
        /// </summary>
        /// <param name="clientBudgetID">No additional detail available.</param>
        /// <returns>A <see cref="Gl"/> object of the specified criteria.</returns>
        public static Gl GetByClientBudgetID(System.Int32? clientBudgetID)
        {
            var criteria = new GlCriteria {};
                            if(clientBudgetID.HasValue) criteria.ClientBudgetID = clientBudgetID.Value;
            
          return  new Gl().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Gl"/> object of the specified criteria. 
        /// </summary>
        /// <param name="gLCostCentreEntityID">No additional detail available.</param>
        /// <returns>A <see cref="Gl"/> object of the specified criteria.</returns>
        public static Gl GetByGLCostCentreEntityID(System.Int32? gLCostCentreEntityID)
        {
            var criteria = new GlCriteria {};
                            if(gLCostCentreEntityID.HasValue) criteria.GLCostCentreEntityID = gLCostCentreEntityID.Value;
            
          return  new Gl().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Gl"/> object of the specified criteria. 
        /// </summary>
        /// <param name="transactionTypeID">No additional detail available.</param>
        /// <returns>A <see cref="Gl"/> object of the specified criteria.</returns>
        public static Gl GetByTransactionTypeID(System.Int32 transactionTypeID)
        {
            var criteria = new GlCriteria {TransactionTypeID = transactionTypeID};
            
            
          return  new Gl().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="Gl"/> object of the specified criteria. 
        /// </summary>
        /// <param name="updatedBy">No additional detail available.</param>
        /// <returns>A <see cref="Gl"/> object of the specified criteria.</returns>
        public static Gl GetByUpdatedBy(System.Int32? updatedBy)
        {
            var criteria = new GlCriteria {};
                            if(updatedBy.HasValue) criteria.UpdatedBy = updatedBy.Value;
            
          return  new Gl().DataPortal_Fetch(criteria);
           
        }

        public static void DeleteGl(System.Int32 glid)
        {
            var criteria = new GlCriteria {Glid = glid};
            
            
             new Gl().DataPortal_Delete(criteria);
        }

        #endregion
 

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Gl"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GlCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(GlCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Gl"/> object has been fetched. 
        /// </summary>    
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);
 
        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Gl"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Gl"/> object has been inserted. 
        /// </summary>
        partial void OnInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Gl"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Gl"/> object has been deleted. 
        /// </summary>
        partial void OnSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GlCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(GlCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Gl"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
        #region ChildPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Gl"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GlCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(GlCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Gl"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Gl"/> object has been mapped. 
        /// </summary>
        //partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Gl"/> object. 
        /// </summary>
        partial void OnChildInserting(ApplicationUser applicationUser, BankTransaction bankTransaction, Budget budget, GLEntity gLEntity, TransactionType transactionType, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Gl"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Gl"/> object. 
        /// </summary>
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildUpdating(ApplicationUser applicationUser, BankTransaction bankTransaction, Budget budget, GLEntity gLEntity, TransactionType transactionType, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Gl"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Gl"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GlCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        //partial void OnDeleting(GlCriteria criteria, ref bool cancel);
        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="Gl"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GlCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(GlCriteria criteria, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Gl"/> object with the specified criteria has been deleted. 
        /// </summary>
        //partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
   

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the GL table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="Gl"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static Gl Exists(GlCriteria criteria)
        {
			try
			{
					
				return new Gl().DataPortal_Fetch(criteria);
			}
			catch(Exception ex)
			{
			}
			return null;
			
        }

        
        #endregion

    }
}