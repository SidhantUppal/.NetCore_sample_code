//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'BankAccountCard.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace CFMData
{
    [Serializable]
    public partial class BankAccountCard 
    {
        #region Contructor(s)

        public BankAccountCard()
        { /* Require use of factory methods */ }

        #endregion

			public BankAccountCard  Save()
      {
        if (this.IsNew)
        {
            DataPortal_Insert();
			this.IsNew=false;
        }
        else
        {
            DataPortal_Update();
        }

        return this;
      }
	  
			public bool IsDirty=false;
			public bool IsNew=true;
			#region Properties
		
			private BankAccountCardDTO _currentDto = null;
			public BankAccountCardDTO CurrentDTO
			{
				get { return _currentDto; }
				set { _currentDto = value; }
			}

			private System.Int32 _bankAccountCardIDProperty  ;
			public System.Int32 BankAccountCardID
			{
				get { return _bankAccountCardIDProperty; }
				set
				{ 
                 
					if (_bankAccountCardIDProperty != value){
						IsDirty = true;
					}
					_bankAccountCardIDProperty=value; 
				}
			}

			private System.Int32 _bankAccountIDProperty  ;
			public System.Int32 BankAccountID
			{
				get { return _bankAccountIDProperty; }
				set
				{ 
                 
					if (_bankAccountIDProperty != value){
						IsDirty = true;
					}
					_bankAccountIDProperty=value; 
				}
			}

			private System.String _cardNumberProperty  ;
			public System.String CardNumber
			{
				get { return _cardNumberProperty; }
				set
				{ 
                 
					if (_cardNumberProperty != value){
						IsDirty = true;
					}
					_cardNumberProperty=value; 
				}
			}

			private System.DateTime _expDateProperty  ;
			public System.DateTime ExpDate
			{
				get { return _expDateProperty; }
				set
				{ 
                 
					if (_expDateProperty != value){
						IsDirty = true;
					}
					_expDateProperty=value; 
				}
			}

			private System.Int32? _heldByStaffIDProperty  = null;
			public System.Int32? HeldByStaffID
			{
				get { return _heldByStaffIDProperty; }
				set
				{ 
                 
					if (_heldByStaffIDProperty != value){
						IsDirty = true;
					}
					_heldByStaffIDProperty=value; 
				}
			}

			private System.DateTime? _heldFromProperty  = null;
			public System.DateTime? HeldFrom
			{
				get { return _heldFromProperty; }
				set
				{ 
                 
					if (_heldFromProperty != value){
						IsDirty = true;
					}
					_heldFromProperty=value; 
				}
			}

			private System.DateTime? _heldToProperty  = null;
			public System.DateTime? HeldTo
			{
				get { return _heldToProperty; }
				set
				{ 
                 
					if (_heldToProperty != value){
						IsDirty = true;
					}
					_heldToProperty=value; 
				}
			}

			private System.Boolean _isActiveProperty  ;
			public System.Boolean IsActive
			{
				get { return _isActiveProperty; }
				set
				{ 
                 
					if (_isActiveProperty != value){
						IsDirty = true;
					}
					_isActiveProperty=value; 
				}
			}

			private System.Int32 _createdByProperty  ;
			public System.Int32 CreatedBy
			{
				get { return _createdByProperty; }
				set
				{ 
                 
					if (_createdByProperty != value){
						IsDirty = true;
					}
					_createdByProperty=value; 
				}
			}

			private System.DateTime _createdOnProperty  ;
			public System.DateTime CreatedOn
			{
				get { return _createdOnProperty; }
				set
				{ 
                 
					if (_createdOnProperty != value){
						IsDirty = true;
					}
					_createdOnProperty=value; 
				}
			}

			private System.Int32? _updatedByProperty  = null;
			public System.Int32? UpdatedBy
			{
				get { return _updatedByProperty; }
				set
				{ 
                 
					if (_updatedByProperty != value){
						IsDirty = true;
					}
					_updatedByProperty=value; 
				}
			}

			private System.DateTime? _updatedOnProperty  = null;
			public System.DateTime? UpdatedOn
			{
				get { return _updatedOnProperty; }
				set
				{ 
                 
					if (_updatedOnProperty != value){
						IsDirty = true;
					}
					_updatedOnProperty=value; 
				}
			}

			// ManyToOne
			private bool _createdByApplicationUserPropertyChecked = false;
			private ApplicationUser _createdByApplicationUserProperty = null;
			public ApplicationUser CreatedByApplicationUser
			{
				get
				{
					if(!_createdByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {ApplicationUserID = CreatedBy};
						
						_createdByApplicationUserPropertyChecked=true;                       
						_createdByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(CreatedBy);
					}                
					return _createdByApplicationUserProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _heldByStaffApplicationUserPropertyChecked = false;
			private ApplicationUser _heldByStaffApplicationUserProperty = null;
			public ApplicationUser HeldByStaffApplicationUser
			{
				get
				{
                    if(!HeldByStaffID.HasValue) 
					return null;

					if(!_heldByStaffApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {};
						if(HeldByStaffID.HasValue) criteria.ApplicationUserID = HeldByStaffID.Value;
						_heldByStaffApplicationUserPropertyChecked=true;                       
						_heldByStaffApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(HeldByStaffID.Value);
					}                
					return _heldByStaffApplicationUserProperty;
				}
			}

			// ManyToOne
			private bool _bankAccountPropertyChecked = false;
			private BankAccount _bankAccountProperty = null;
			public BankAccount BankAccount
			{
				get
				{
					if(!_bankAccountPropertyChecked)
					{						
						var criteria = new CFMData.BankAccountCriteria {BankAccountID = BankAccountID};
						
						_bankAccountPropertyChecked=true;                       
						_bankAccountProperty= CFMData.BankAccount.GetByBankAccountID(BankAccountID);
					}                
					return _bankAccountProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _updatedByApplicationUserPropertyChecked = false;
			private ApplicationUser _updatedByApplicationUserProperty = null;
			public ApplicationUser UpdatedByApplicationUser
			{
				get
				{
                    if(!UpdatedBy.HasValue) 
					return null;

					if(!_updatedByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {};
						if(UpdatedBy.HasValue) criteria.ApplicationUserID = UpdatedBy.Value;
						_updatedByApplicationUserPropertyChecked=true;                       
						_updatedByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(UpdatedBy.Value);
					}                
					return _updatedByApplicationUserProperty;
				}
			}


        #endregion
		public bool IsChildDirty()
		{
		
		


			return false;
		}

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="BankAccountCard"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="BankAccountCard"/>.</returns>    
        public static BankAccountCard NewBankAccountCard()
        {
            BankAccountCard obj=new BankAccountCard();

            return obj;
        }

			public static BankAccountCard GetBankAccountCard(Func<IDataReader, BankAccountCard> rowParser,SqlDataReader reader)
			{
				BankAccountCard obj = rowParser(reader);
				obj.InitDTO();					
				obj.IsDirty = false;
				obj.IsNew = false;
				return obj;
			}
        
 

        /// <summary>
        /// Returns a <see cref="BankAccountCard"/> object of the specified criteria. 
        /// </summary>
        /// <param name="bankAccountCardID">No additional detail available.</param>
        /// <returns>A <see cref="BankAccountCard"/> object of the specified criteria.</returns>
        public static BankAccountCard GetByBankAccountCardID(System.Int32 bankAccountCardID)
        {
            var criteria = new BankAccountCardCriteria {BankAccountCardID = bankAccountCardID};
            
            
          return  new BankAccountCard().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="BankAccountCard"/> object of the specified criteria. 
        /// </summary>
        /// <param name="createdBy">No additional detail available.</param>
        /// <returns>A <see cref="BankAccountCard"/> object of the specified criteria.</returns>
        public static BankAccountCard GetByCreatedBy(System.Int32 createdBy)
        {
            var criteria = new BankAccountCardCriteria {CreatedBy = createdBy};
            
            
          return  new BankAccountCard().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="BankAccountCard"/> object of the specified criteria. 
        /// </summary>
        /// <param name="heldByStaffID">No additional detail available.</param>
        /// <returns>A <see cref="BankAccountCard"/> object of the specified criteria.</returns>
        public static BankAccountCard GetByHeldByStaffID(System.Int32? heldByStaffID)
        {
            var criteria = new BankAccountCardCriteria {};
                            if(heldByStaffID.HasValue) criteria.HeldByStaffID = heldByStaffID.Value;
            
          return  new BankAccountCard().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="BankAccountCard"/> object of the specified criteria. 
        /// </summary>
        /// <param name="bankAccountID">No additional detail available.</param>
        /// <returns>A <see cref="BankAccountCard"/> object of the specified criteria.</returns>
        public static BankAccountCard GetByBankAccountID(System.Int32 bankAccountID)
        {
            var criteria = new BankAccountCardCriteria {BankAccountID = bankAccountID};
            
            
          return  new BankAccountCard().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="BankAccountCard"/> object of the specified criteria. 
        /// </summary>
        /// <param name="updatedBy">No additional detail available.</param>
        /// <returns>A <see cref="BankAccountCard"/> object of the specified criteria.</returns>
        public static BankAccountCard GetByUpdatedBy(System.Int32? updatedBy)
        {
            var criteria = new BankAccountCardCriteria {};
                            if(updatedBy.HasValue) criteria.UpdatedBy = updatedBy.Value;
            
          return  new BankAccountCard().DataPortal_Fetch(criteria);
           
        }

        public static void DeleteBankAccountCard(System.Int32 bankAccountCardID)
        {
            var criteria = new BankAccountCardCriteria {BankAccountCardID = bankAccountCardID};
            
            
             new BankAccountCard().DataPortal_Delete(criteria);
        }

        #endregion
 

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="BankAccountCard"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="BankAccountCardCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(BankAccountCardCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="BankAccountCard"/> object has been fetched. 
        /// </summary>    
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);
 
        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="BankAccountCard"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="BankAccountCard"/> object has been inserted. 
        /// </summary>
        partial void OnInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="BankAccountCard"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="BankAccountCard"/> object has been deleted. 
        /// </summary>
        partial void OnSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="BankAccountCardCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(BankAccountCardCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="BankAccountCard"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
        #region ChildPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="BankAccountCard"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="BankAccountCardCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(BankAccountCardCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="BankAccountCard"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="BankAccountCard"/> object has been mapped. 
        /// </summary>
        //partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        partial void OnChildInserting(ApplicationUser applicationUser, BankAccount bankAccount, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="BankAccountCard"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildUpdating(ApplicationUser applicationUser, BankAccount bankAccount, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="BankAccountCard"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="BankAccountCard"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="BankAccountCardCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        //partial void OnDeleting(BankAccountCardCriteria criteria, ref bool cancel);
        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="BankAccountCard"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="BankAccountCardCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(BankAccountCardCriteria criteria, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="BankAccountCard"/> object with the specified criteria has been deleted. 
        /// </summary>
        //partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
   

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the BankAccountCard table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="BankAccountCard"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static BankAccountCard Exists(BankAccountCardCriteria criteria)
        {
			try
			{
					
				return new BankAccountCard().DataPortal_Fetch(criteria);
			}
			catch(Exception ex)
			{
			}
			return null;
			
        }

        
        #endregion

    }
}