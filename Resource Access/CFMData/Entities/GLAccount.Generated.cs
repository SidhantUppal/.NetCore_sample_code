//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'GLAccount.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace CFMData
{
    [Serializable]
    public partial class GLAccount 
    {
        #region Contructor(s)

        public GLAccount()
        { /* Require use of factory methods */ }

        #endregion

			public GLAccount  Save()
      {
        if (this.IsNew)
        {
            DataPortal_Insert();
			this.IsNew=false;
        }
        else
        {
            DataPortal_Update();
        }

        return this;
      }
	  
			public bool IsDirty=false;
			public bool IsNew=true;
			#region Properties
		
			private GLAccountDTO _currentDto = null;
			public GLAccountDTO CurrentDTO
			{
				get { return _currentDto; }
				set { _currentDto = value; }
			}

			private System.Int32 _gLAccountIDProperty  ;
			public System.Int32 GLAccountID
			{
				get { return _gLAccountIDProperty; }
				set
				{ 
                 
					if (_gLAccountIDProperty != value){
						IsDirty = true;
					}
					_gLAccountIDProperty=value; 
				}
			}

			private System.String _accountCodeProperty  ;
			public System.String AccountCode
			{
				get { return _accountCodeProperty; }
				set
				{ 
                 
					if (_accountCodeProperty != value){
						IsDirty = true;
					}
					_accountCodeProperty=value; 
				}
			}

			private System.String _accountNameProperty  ;
			public System.String AccountName
			{
				get { return _accountNameProperty; }
				set
				{ 
                 
					if (_accountNameProperty != value){
						IsDirty = true;
					}
					_accountNameProperty=value; 
				}
			}

			private System.Int32 _gLEntityIDProperty  ;
			public System.Int32 GLEntityID
			{
				get { return _gLEntityIDProperty; }
				set
				{ 
                 
					if (_gLEntityIDProperty != value){
						IsDirty = true;
					}
					_gLEntityIDProperty=value; 
				}
			}

			private System.Int32? _bankAccountIDProperty  = null;
			public System.Int32? BankAccountID
			{
				get { return _bankAccountIDProperty; }
				set
				{ 
                 
					if (_bankAccountIDProperty != value){
						IsDirty = true;
					}
					_bankAccountIDProperty=value; 
				}
			}

			private System.Int32 _gLAccountTypeIDProperty  ;
			public System.Int32 GLAccountTypeID
			{
				get { return _gLAccountTypeIDProperty; }
				set
				{ 
                 
					if (_gLAccountTypeIDProperty != value){
						IsDirty = true;
					}
					_gLAccountTypeIDProperty=value; 
				}
			}

			private System.Boolean _isActiveProperty  ;
			public System.Boolean IsActive
			{
				get { return _isActiveProperty; }
				set
				{ 
                 
					if (_isActiveProperty != value){
						IsDirty = true;
					}
					_isActiveProperty=value; 
				}
			}

			private System.Int32 _createdByProperty  ;
			public System.Int32 CreatedBy
			{
				get { return _createdByProperty; }
				set
				{ 
                 
					if (_createdByProperty != value){
						IsDirty = true;
					}
					_createdByProperty=value; 
				}
			}

			private System.DateTime _createdOnProperty  ;
			public System.DateTime CreatedOn
			{
				get { return _createdOnProperty; }
				set
				{ 
                 
					if (_createdOnProperty != value){
						IsDirty = true;
					}
					_createdOnProperty=value; 
				}
			}

			private System.Int32? _updatedByProperty  = null;
			public System.Int32? UpdatedBy
			{
				get { return _updatedByProperty; }
				set
				{ 
                 
					if (_updatedByProperty != value){
						IsDirty = true;
					}
					_updatedByProperty=value; 
				}
			}

			private System.DateTime? _updatedOnProperty  = null;
			public System.DateTime? UpdatedOn
			{
				get { return _updatedOnProperty; }
				set
				{ 
                 
					if (_updatedOnProperty != value){
						IsDirty = true;
					}
					_updatedOnProperty=value; 
				}
			}

			// ManyToOne
			private bool _createdByApplicationUserPropertyChecked = false;
			private ApplicationUser _createdByApplicationUserProperty = null;
			public ApplicationUser CreatedByApplicationUser
			{
				get
				{
					if(!_createdByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {ApplicationUserID = CreatedBy};
						
						_createdByApplicationUserPropertyChecked=true;                       
						_createdByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(CreatedBy);
					}                
					return _createdByApplicationUserProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _bankAccountPropertyChecked = false;
			private BankAccount _bankAccountProperty = null;
			public BankAccount BankAccount
			{
				get
				{
                    if(!BankAccountID.HasValue) 
					return null;

					if(!_bankAccountPropertyChecked)
					{						
						var criteria = new CFMData.BankAccountCriteria {};
						if(BankAccountID.HasValue) criteria.BankAccountID = BankAccountID.Value;
						_bankAccountPropertyChecked=true;                       
						_bankAccountProperty= CFMData.BankAccount.GetByBankAccountID(BankAccountID.Value);
					}                
					return _bankAccountProperty;
				}
			}

			// ManyToOne
			private bool _gLAccountTypePropertyChecked = false;
			private GLAccountType _gLAccountTypeProperty = null;
			public GLAccountType GLAccountType
			{
				get
				{
					if(!_gLAccountTypePropertyChecked)
					{						
						var criteria = new CFMData.GLAccountTypeCriteria {GLAccountTypeID = GLAccountTypeID};
						
						_gLAccountTypePropertyChecked=true;                       
						_gLAccountTypeProperty= CFMData.GLAccountType.GetByGLAccountTypeID(GLAccountTypeID);
					}                
					return _gLAccountTypeProperty;
				}
			}

			// ManyToOne
			private bool _gLEntityPropertyChecked = false;
			private GLEntity _gLEntityProperty = null;
			public GLEntity GLEntity
			{
				get
				{
					if(!_gLEntityPropertyChecked)
					{						
						var criteria = new CFMData.GLEntityCriteria {GLEntityID = GLEntityID};
						
						_gLEntityPropertyChecked=true;                       
						_gLEntityProperty= CFMData.GLEntity.GetByGLEntityID(GLEntityID);
					}                
					return _gLEntityProperty;
				}
			}

			// ManyToZeroOrOne
			private bool _updatedByApplicationUserPropertyChecked = false;
			private ApplicationUser _updatedByApplicationUserProperty = null;
			public ApplicationUser UpdatedByApplicationUser
			{
				get
				{
                    if(!UpdatedBy.HasValue) 
					return null;

					if(!_updatedByApplicationUserPropertyChecked)
					{						
						var criteria = new CFMData.ApplicationUserCriteria {};
						if(UpdatedBy.HasValue) criteria.ApplicationUserID = UpdatedBy.Value;
						_updatedByApplicationUserPropertyChecked=true;                       
						_updatedByApplicationUserProperty= CFMData.ApplicationUser.GetByApplicationUserID(UpdatedBy.Value);
					}                
					return _updatedByApplicationUserProperty;
				}
			}


        #endregion
		public bool IsChildDirty()
		{
		
		


			return false;
		}

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="GLAccount"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="GLAccount"/>.</returns>    
        public static GLAccount NewGLAccount()
        {
            GLAccount obj=new GLAccount();

            return obj;
        }

			public static GLAccount GetGLAccount(Func<IDataReader, GLAccount> rowParser,SqlDataReader reader)
			{
				GLAccount obj = rowParser(reader);
				obj.InitDTO();					
				obj.IsDirty = false;
				obj.IsNew = false;
				return obj;
			}
        
 

        /// <summary>
        /// Returns a <see cref="GLAccount"/> object of the specified criteria. 
        /// </summary>
        /// <param name="gLAccountID">No additional detail available.</param>
        /// <returns>A <see cref="GLAccount"/> object of the specified criteria.</returns>
        public static GLAccount GetByGLAccountID(System.Int32 gLAccountID)
        {
            var criteria = new GLAccountCriteria {GLAccountID = gLAccountID};
            
            
          return  new GLAccount().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="GLAccount"/> object of the specified criteria. 
        /// </summary>
        /// <param name="createdBy">No additional detail available.</param>
        /// <returns>A <see cref="GLAccount"/> object of the specified criteria.</returns>
        public static GLAccount GetByCreatedBy(System.Int32 createdBy)
        {
            var criteria = new GLAccountCriteria {CreatedBy = createdBy};
            
            
          return  new GLAccount().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="GLAccount"/> object of the specified criteria. 
        /// </summary>
        /// <param name="bankAccountID">No additional detail available.</param>
        /// <returns>A <see cref="GLAccount"/> object of the specified criteria.</returns>
        public static GLAccount GetByBankAccountID(System.Int32? bankAccountID)
        {
            var criteria = new GLAccountCriteria {};
                            if(bankAccountID.HasValue) criteria.BankAccountID = bankAccountID.Value;
            
          return  new GLAccount().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="GLAccount"/> object of the specified criteria. 
        /// </summary>
        /// <param name="gLAccountTypeID">No additional detail available.</param>
        /// <returns>A <see cref="GLAccount"/> object of the specified criteria.</returns>
        public static GLAccount GetByGLAccountTypeID(System.Int32 gLAccountTypeID)
        {
            var criteria = new GLAccountCriteria {GLAccountTypeID = gLAccountTypeID};
            
            
          return  new GLAccount().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="GLAccount"/> object of the specified criteria. 
        /// </summary>
        /// <param name="gLEntityID">No additional detail available.</param>
        /// <returns>A <see cref="GLAccount"/> object of the specified criteria.</returns>
        public static GLAccount GetByGLEntityID(System.Int32 gLEntityID)
        {
            var criteria = new GLAccountCriteria {GLEntityID = gLEntityID};
            
            
          return  new GLAccount().DataPortal_Fetch(criteria);
           
        }

        /// <summary>
        /// Returns a <see cref="GLAccount"/> object of the specified criteria. 
        /// </summary>
        /// <param name="updatedBy">No additional detail available.</param>
        /// <returns>A <see cref="GLAccount"/> object of the specified criteria.</returns>
        public static GLAccount GetByUpdatedBy(System.Int32? updatedBy)
        {
            var criteria = new GLAccountCriteria {};
                            if(updatedBy.HasValue) criteria.UpdatedBy = updatedBy.Value;
            
          return  new GLAccount().DataPortal_Fetch(criteria);
           
        }

        public static void DeleteGLAccount(System.Int32 gLAccountID)
        {
            var criteria = new GLAccountCriteria {GLAccountID = gLAccountID};
            
            
             new GLAccount().DataPortal_Delete(criteria);
        }

        #endregion
 

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccount"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(GLAccountCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccount"/> object has been fetched. 
        /// </summary>    
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);
 
        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccount"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccount"/> object has been inserted. 
        /// </summary>
        partial void OnInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccount"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccount"/> object has been deleted. 
        /// </summary>
        partial void OnSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(GLAccountCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="GLAccount"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
        #region ChildPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccount"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(GLAccountCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccount"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        //partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccount"/> object has been mapped. 
        /// </summary>
        //partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="GLAccount"/> object. 
        /// </summary>
        partial void OnChildInserting(ApplicationUser applicationUser, BankAccount bankAccount, GLAccountType gLAccountType, GLEntity gLEntity, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccount"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="GLAccount"/> object. 
        /// </summary>
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildUpdating(ApplicationUser applicationUser, BankAccount bankAccount, GLAccountType gLAccountType, GLEntity gLEntity, SqlConnection connection, ref bool cancel,SqlTransaction trans);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccount"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccount"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        //partial void OnDeleting(GLAccountCriteria criteria, ref bool cancel);
        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="GLAccount"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="GLAccountCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(GLAccountCriteria criteria, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="GLAccount"/> object with the specified criteria has been deleted. 
        /// </summary>
        //partial void OnDeleted();
        //partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion
   

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the GLAccount table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="GLAccount"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static GLAccount Exists(GLAccountCriteria criteria)
        {
			try
			{
					
				return new GLAccount().DataPortal_Fetch(criteria);
			}
			catch(Exception ex)
			{
			}
			return null;
			
        }

        
        #endregion

    }
}