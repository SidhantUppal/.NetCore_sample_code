//------------------------------------------------------------------------------
// <autogenerated>
//     
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'ApplicationUser.cs'.
//
//     Template: EditableRoot.DataAccess.StoredProcedures.cst
//     
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
 using Dapper;

namespace CFMData
{
	public partial class ApplicationUser
	{
    
		private ApplicationUser DataPortal_Fetch(ApplicationUserCriteria criteria)
		{
 
			bool cancel = false;
			OnFetching(criteria, ref cancel);
			if (cancel) return null;
			using (var connection = new SqlConnection(ADOHelper.ConnectionString))
			{
				connection.Open();
				using (var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Select]", connection))
				{
					command.CommandType = CommandType.StoredProcedure;
					command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    command.Parameters.AddWithValue("@p_LastNameHasValue", criteria.LastNameHasValue);
                command.Parameters.AddWithValue("@p_EmailAddressHasValue", criteria.EmailAddressHasValue);
                command.Parameters.AddWithValue("@p_MobilePhoneHasValue", criteria.MobilePhoneHasValue);
                command.Parameters.AddWithValue("@p_WorkPhoneHasValue", criteria.WorkPhoneHasValue);
                command.Parameters.AddWithValue("@p_EmployeeNumberHasValue", criteria.EmployeeNumberHasValue);
                command.Parameters.AddWithValue("@p_PasswordResetTokenHasValue", criteria.PasswordResetTokenHasValue);
                command.Parameters.AddWithValue("@p_PasswordResetTokenExpiryHasValue", criteria.PasswordResetTokenExpiryHasValue);
                command.Parameters.AddWithValue("@p_ApplicationRoleIDHasValue", criteria.ApplicationRoleIDHasValue);
                command.Parameters.AddWithValue("@p_LastLoggedOnHasValue", criteria.LastLoggedOnHasValue);
                command.Parameters.AddWithValue("@p_StatementDeliveryOptionIDHasValue", criteria.StatementDeliveryOptionIDHasValue);
                command.Parameters.AddWithValue("@p_PhysicalAddressIDHasValue", criteria.PhysicalAddressIDHasValue);
                command.Parameters.AddWithValue("@p_PostalAddressIDHasValue", criteria.PostalAddressIDHasValue);
                command.Parameters.AddWithValue("@p_LastActiveCheckSentOnHasValue", criteria.LastActiveCheckSentOnHasValue);
                command.Parameters.AddWithValue("@p_CreatedByHasValue", criteria.CreatedByHasValue);
                command.Parameters.AddWithValue("@p_UpdatedByHasValue", criteria.UpdatedByHasValue);
                command.Parameters.AddWithValue("@p_UpdatedOnHasValue", criteria.UpdatedOnHasValue);
                command.Parameters.AddWithValue("@p_LastPasswordChangedOnHasValue", criteria.LastPasswordChangedOnHasValue);
					using(var reader = command.ExecuteReader())
					{
						var rowParser = reader.GetRowParser<ApplicationUser>();                       
						if(reader.Read())
						{
							return GetApplicationUser(rowParser, reader);							
						}                            
						else
							throw new Exception(String.Format("The record was not found in 'dbo.ApplicationUser' using the following criteria: {0}.", criteria));
					}
				}
			}
			OnFetched();
		}

       // [Transactional(TransactionalTypes.TransactionScope)]
		protected   void DataPortal_Insert()
		{
			bool cancel = false;
			OnInserting(ref cancel);
			if (cancel) return;
			using (var connection = new SqlConnection(ADOHelper.ConnectionString))
			{
				connection.Open();
				SqlTransaction trans = connection.BeginTransaction();
				try
				{
				
				using(var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Insert]", connection,trans))
				{
					command.CommandType = CommandType.StoredProcedure;
					
          command.Parameters.AddWithValue("@p_ApplicationUserID", this.ApplicationUserID);
                command.Parameters["@p_ApplicationUserID"].Direction = ParameterDirection.Output;
                command.Parameters.AddWithValue("@p_LoginName", this.LoginName);
                command.Parameters.AddWithValue("@p_Password", this.Password);
                command.Parameters.AddWithValue("@p_FirstName", this.FirstName);
                command.Parameters.AddWithValue("@p_LastName", ADOHelper.NullCheck(this.LastName));
                command.Parameters.AddWithValue("@p_EmailAddress", ADOHelper.NullCheck(this.EmailAddress));
                command.Parameters.AddWithValue("@p_MobilePhone", ADOHelper.NullCheck(this.MobilePhone));
                command.Parameters.AddWithValue("@p_WorkPhone", ADOHelper.NullCheck(this.WorkPhone));
                command.Parameters.AddWithValue("@p_EmployeeNumber", ADOHelper.NullCheck(this.EmployeeNumber));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_PasswordResetNeeded", this.PasswordResetNeeded);
                command.Parameters.AddWithValue("@p_PasswordResetToken", ADOHelper.NullCheck(this.PasswordResetToken));
                command.Parameters.AddWithValue("@p_PasswordResetTokenExpiry", ADOHelper.NullCheck(this.PasswordResetTokenExpiry));
                command.Parameters.AddWithValue("@p_MustChangePassword", this.MustChangePassword);
                command.Parameters.AddWithValue("@p_ApplicationRoleID", ADOHelper.NullCheck(this.ApplicationRoleID));
                command.Parameters.AddWithValue("@p_LastLoggedOn", ADOHelper.NullCheck(this.LastLoggedOn));
                command.Parameters.AddWithValue("@p_StatementDeliveryOptionID", ADOHelper.NullCheck(this.StatementDeliveryOptionID));
                command.Parameters.AddWithValue("@p_PhysicalAddressID", ADOHelper.NullCheck(this.PhysicalAddressID));
                command.Parameters.AddWithValue("@p_SameAsPhysicalAddress", this.SameAsPhysicalAddress);
                command.Parameters.AddWithValue("@p_PostalAddressID", ADOHelper.NullCheck(this.PostalAddressID));
                command.Parameters.AddWithValue("@p_LastActiveCheckSentOn", ADOHelper.NullCheck(this.LastActiveCheckSentOn));
                command.Parameters.AddWithValue("@p_CreatedBy", ADOHelper.NullCheck(this.CreatedBy));
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_LastPasswordChangedOn", ADOHelper.NullCheck(this.LastPasswordChangedOn));
					command.ExecuteNonQuery();                  
					_applicationUserIDProperty=(System.Int32)command.Parameters["@p_ApplicationUserID"].Value;
                    
				}
                
				UpdateChildren(this, connection,trans);
				
				trans.Commit();
			}
			catch(Exception ex)
			{
				trans.Rollback();
				throw;
			}
			
		}
			

			OnInserted();

		}

       // [Transactional(TransactionalTypes.TransactionScope)]
		protected   void DataPortal_Update()
		{
			bool cancel = false;
			OnUpdating(ref cancel);
			if (cancel) return;
			using (var connection = new SqlConnection(ADOHelper.ConnectionString))
			{
				connection.Open();
				SqlTransaction trans = connection.BeginTransaction();
				try
				{
				using(var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Update]", connection,trans))
				{
					command.CommandType = CommandType.StoredProcedure;
					command.Parameters.AddWithValue("@p_ApplicationUserID", this.ApplicationUserID);
                command.Parameters.AddWithValue("@p_LoginName", this.LoginName);
                command.Parameters.AddWithValue("@p_Password", this.Password);
                command.Parameters.AddWithValue("@p_FirstName", this.FirstName);
                command.Parameters.AddWithValue("@p_LastName", ADOHelper.NullCheck(this.LastName));
                command.Parameters.AddWithValue("@p_EmailAddress", ADOHelper.NullCheck(this.EmailAddress));
                command.Parameters.AddWithValue("@p_MobilePhone", ADOHelper.NullCheck(this.MobilePhone));
                command.Parameters.AddWithValue("@p_WorkPhone", ADOHelper.NullCheck(this.WorkPhone));
                command.Parameters.AddWithValue("@p_EmployeeNumber", ADOHelper.NullCheck(this.EmployeeNumber));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_PasswordResetNeeded", this.PasswordResetNeeded);
                command.Parameters.AddWithValue("@p_PasswordResetToken", ADOHelper.NullCheck(this.PasswordResetToken));
                command.Parameters.AddWithValue("@p_PasswordResetTokenExpiry", ADOHelper.NullCheck(this.PasswordResetTokenExpiry));
                command.Parameters.AddWithValue("@p_MustChangePassword", this.MustChangePassword);
                command.Parameters.AddWithValue("@p_ApplicationRoleID", ADOHelper.NullCheck(this.ApplicationRoleID));
                command.Parameters.AddWithValue("@p_LastLoggedOn", ADOHelper.NullCheck(this.LastLoggedOn));
                command.Parameters.AddWithValue("@p_StatementDeliveryOptionID", ADOHelper.NullCheck(this.StatementDeliveryOptionID));
                command.Parameters.AddWithValue("@p_PhysicalAddressID", ADOHelper.NullCheck(this.PhysicalAddressID));
                command.Parameters.AddWithValue("@p_SameAsPhysicalAddress", this.SameAsPhysicalAddress);
                command.Parameters.AddWithValue("@p_PostalAddressID", ADOHelper.NullCheck(this.PostalAddressID));
                command.Parameters.AddWithValue("@p_LastActiveCheckSentOn", ADOHelper.NullCheck(this.LastActiveCheckSentOn));
                command.Parameters.AddWithValue("@p_CreatedBy", ADOHelper.NullCheck(this.CreatedBy));
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_LastPasswordChangedOn", ADOHelper.NullCheck(this.LastPasswordChangedOn));
					//result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
					int result = command.ExecuteNonQuery();
					if (result == 0)
						throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

				}
				UpdateChildren(this, connection,trans);
				//FieldManager.UpdateChildren(this, connection);
				trans.Commit();
			}
			catch(Exception ex)
			{
				trans.Rollback();
				throw;
			}
			
		}

			OnUpdated();
		}
		protected   void UpdateChildren(ApplicationUser parent,SqlConnection connection,SqlTransaction trans)
		{
		
		
			
			if(_createdByAddressesPropertyChecked )
			{
				if(_createdByAddressesProperty!=null)
				{
				
					foreach (Address obj in _createdByAddressesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByAddressesPropertyChecked )
			{
				if(_updatedByAddressesProperty!=null)
				{
				
					foreach (Address obj in _updatedByAddressesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByApplicationPermissionsPropertyChecked )
			{
				if(_createdByApplicationPermissionsProperty!=null)
				{
				
					foreach (ApplicationPermission obj in _createdByApplicationPermissionsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByApplicationPermissionsPropertyChecked )
			{
				if(_updatedByApplicationPermissionsProperty!=null)
				{
				
					foreach (ApplicationPermission obj in _updatedByApplicationPermissionsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByApplicationRolesPropertyChecked )
			{
				if(_createdByApplicationRolesProperty!=null)
				{
				
					foreach (ApplicationRole obj in _createdByApplicationRolesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByApplicationRolesPropertyChecked )
			{
				if(_updatedByApplicationRolesProperty!=null)
				{
				
					foreach (ApplicationRole obj in _updatedByApplicationRolesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByApplicationUsers1PropertyChecked )
			{
				if(_updatedByApplicationUsers1Property!=null)
				{
				
					foreach (ApplicationUser obj in _updatedByApplicationUsers1Property)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByApplicationUsers2PropertyChecked )
			{
				if(_updatedByApplicationUsers2Property!=null)
				{
				
					foreach (ApplicationUser obj in _updatedByApplicationUsers2Property)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByBankAccountsPropertyChecked )
			{
				if(_createdByBankAccountsProperty!=null)
				{
				
					foreach (BankAccount obj in _createdByBankAccountsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByBankAccountsPropertyChecked )
			{
				if(_updatedByBankAccountsProperty!=null)
				{
				
					foreach (BankAccount obj in _updatedByBankAccountsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByBankAccountCardsPropertyChecked )
			{
				if(_createdByBankAccountCardsProperty!=null)
				{
				
					foreach (BankAccountCard obj in _createdByBankAccountCardsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_heldByStaffBankAccountCardsPropertyChecked )
			{
				if(_heldByStaffBankAccountCardsProperty!=null)
				{
				
					foreach (BankAccountCard obj in _heldByStaffBankAccountCardsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByBankAccountCardsPropertyChecked )
			{
				if(_updatedByBankAccountCardsProperty!=null)
				{
				
					foreach (BankAccountCard obj in _updatedByBankAccountCardsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByBankTransactionsPropertyChecked )
			{
				if(_createdByBankTransactionsProperty!=null)
				{
				
					foreach (BankTransaction obj in _createdByBankTransactionsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByBankTransactionsPropertyChecked )
			{
				if(_updatedByBankTransactionsProperty!=null)
				{
				
					foreach (BankTransaction obj in _updatedByBankTransactionsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByBudgetsPropertyChecked )
			{
				if(_createdByBudgetsProperty!=null)
				{
				
					foreach (Budget obj in _createdByBudgetsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByBudgetsPropertyChecked )
			{
				if(_updatedByBudgetsProperty!=null)
				{
				
					foreach (Budget obj in _updatedByBudgetsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByBudgetApprovalsPropertyChecked )
			{
				if(_createdByBudgetApprovalsProperty!=null)
				{
				
					foreach (BudgetApproval obj in _createdByBudgetApprovalsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_administratorUserBudgetApprovalsPropertyChecked )
			{
				if(_administratorUserBudgetApprovalsProperty!=null)
				{
				
					foreach (BudgetApproval obj in _administratorUserBudgetApprovalsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_operationsUserBudgetApprovalsPropertyChecked )
			{
				if(_operationsUserBudgetApprovalsProperty!=null)
				{
				
					foreach (BudgetApproval obj in _operationsUserBudgetApprovalsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByBudgetApprovalsPropertyChecked )
			{
				if(_updatedByBudgetApprovalsProperty!=null)
				{
				
					foreach (BudgetApproval obj in _updatedByBudgetApprovalsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByBudgetApprovalCommsPropertyChecked )
			{
				if(_createdByBudgetApprovalCommsProperty!=null)
				{
				
					foreach (BudgetApprovalComm obj in _createdByBudgetApprovalCommsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByBudgetApprovalCommsPropertyChecked )
			{
				if(_updatedByBudgetApprovalCommsProperty!=null)
				{
				
					foreach (BudgetApprovalComm obj in _updatedByBudgetApprovalCommsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByBudgetLinesPropertyChecked )
			{
				if(_createdByBudgetLinesProperty!=null)
				{
				
					foreach (BudgetLine obj in _createdByBudgetLinesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByBudgetLinesPropertyChecked )
			{
				if(_updatedByBudgetLinesProperty!=null)
				{
				
					foreach (BudgetLine obj in _updatedByBudgetLinesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByBudgetLineCategoriesPropertyChecked )
			{
				if(_createdByBudgetLineCategoriesProperty!=null)
				{
				
					foreach (BudgetLineCategory obj in _createdByBudgetLineCategoriesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByBudgetLineCategoriesPropertyChecked )
			{
				if(_updatedByBudgetLineCategoriesProperty!=null)
				{
				
					foreach (BudgetLineCategory obj in _updatedByBudgetLineCategoriesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByClientsPropertyChecked )
			{
				if(_createdByClientsProperty!=null)
				{
				
					foreach (Client obj in _createdByClientsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByClientsPropertyChecked )
			{
				if(_updatedByClientsProperty!=null)
				{
				
					foreach (Client obj in _updatedByClientsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByDataOptionsPropertyChecked )
			{
				if(_createdByDataOptionsProperty!=null)
				{
				
					foreach (DataOption obj in _createdByDataOptionsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByDataOptionsPropertyChecked )
			{
				if(_updatedByDataOptionsProperty!=null)
				{
				
					foreach (DataOption obj in _updatedByDataOptionsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByDataOptionTypesPropertyChecked )
			{
				if(_createdByDataOptionTypesProperty!=null)
				{
				
					foreach (DataOptionType obj in _createdByDataOptionTypesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByDataOptionTypesPropertyChecked )
			{
				if(_updatedByDataOptionTypesProperty!=null)
				{
				
					foreach (DataOptionType obj in _updatedByDataOptionTypesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByFinAdministratorsPropertyChecked )
			{
				if(_createdByFinAdministratorsProperty!=null)
				{
				
					foreach (FinAdministrator obj in _createdByFinAdministratorsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByFinAdministratorsPropertyChecked )
			{
				if(_updatedByFinAdministratorsProperty!=null)
				{
				
					foreach (FinAdministrator obj in _updatedByFinAdministratorsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByFinAdministratorAppUsersPropertyChecked )
			{
				if(_createdByFinAdministratorAppUsersProperty!=null)
				{
				
					foreach (FinAdministratorAppUser obj in _createdByFinAdministratorAppUsersProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_applicationUserFinAdministratorAppUsersPropertyChecked )
			{
				if(_applicationUserFinAdministratorAppUsersProperty!=null)
				{
				
					foreach (FinAdministratorAppUser obj in _applicationUserFinAdministratorAppUsersProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByFinAdministratorAppUsersPropertyChecked )
			{
				if(_updatedByFinAdministratorAppUsersProperty!=null)
				{
				
					foreach (FinAdministratorAppUser obj in _updatedByFinAdministratorAppUsersProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByFinAdministratorClientsPropertyChecked )
			{
				if(_createdByFinAdministratorClientsProperty!=null)
				{
				
					foreach (FinAdministratorClient obj in _createdByFinAdministratorClientsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByFinAdministratorClientsPropertyChecked )
			{
				if(_updatedByFinAdministratorClientsProperty!=null)
				{
				
					foreach (FinAdministratorClient obj in _updatedByFinAdministratorClientsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByGlsPropertyChecked )
			{
				if(_createdByGlsProperty!=null)
				{
				
					foreach (Gl obj in _createdByGlsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByGlsPropertyChecked )
			{
				if(_updatedByGlsProperty!=null)
				{
				
					foreach (Gl obj in _updatedByGlsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByGLAccountsPropertyChecked )
			{
				if(_createdByGLAccountsProperty!=null)
				{
				
					foreach (GLAccount obj in _createdByGLAccountsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByGLAccountsPropertyChecked )
			{
				if(_updatedByGLAccountsProperty!=null)
				{
				
					foreach (GLAccount obj in _updatedByGLAccountsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByGLAccountTypesPropertyChecked )
			{
				if(_createdByGLAccountTypesProperty!=null)
				{
				
					foreach (GLAccountType obj in _createdByGLAccountTypesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByGLAccountTypesPropertyChecked )
			{
				if(_updatedByGLAccountTypesProperty!=null)
				{
				
					foreach (GLAccountType obj in _updatedByGLAccountTypesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByGLEntitiesPropertyChecked )
			{
				if(_createdByGLEntitiesProperty!=null)
				{
				
					foreach (GLEntity obj in _createdByGLEntitiesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByGLEntitiesPropertyChecked )
			{
				if(_updatedByGLEntitiesProperty!=null)
				{
				
					foreach (GLEntity obj in _updatedByGLEntitiesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByHomesPropertyChecked )
			{
				if(_createdByHomesProperty!=null)
				{
				
					foreach (Home obj in _createdByHomesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByHomesPropertyChecked )
			{
				if(_updatedByHomesProperty!=null)
				{
				
					foreach (Home obj in _updatedByHomesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByHomeClientsPropertyChecked )
			{
				if(_createdByHomeClientsProperty!=null)
				{
				
					foreach (HomeClient obj in _createdByHomeClientsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByHomeClientsPropertyChecked )
			{
				if(_updatedByHomeClientsProperty!=null)
				{
				
					foreach (HomeClient obj in _updatedByHomeClientsProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_createdByMailingTemplatesPropertyChecked )
			{
				if(_createdByMailingTemplatesProperty!=null)
				{
				
					foreach (MailingTemplate obj in _createdByMailingTemplatesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}

			
			if(_updatedByMailingTemplatesPropertyChecked )
			{
				if(_updatedByMailingTemplatesProperty!=null)
				{
				
					foreach (MailingTemplate obj in _updatedByMailingTemplatesProperty)
					{
						if (obj.IsNew)
						{
							obj.Child_Insert(parent, connection,trans);
						}
						else
						{
							if (obj.IsDirty ||  obj.IsChildDirty())
							{							
								obj.Child_Update(parent, connection,trans);
							}
						}
					}
				}
					
 
			}


		}

		protected   void DataPortal_DeleteSelf()
		{
			bool cancel = false;
			OnSelfDeleting(ref cancel);
			if (cancel) return;            
			DataPortal_Delete(new ApplicationUserCriteria (ApplicationUserID));        
			OnSelfDeleted();
		}
        
		//[Transactional(TransactionalTypes.TransactionScope)]
		protected void DataPortal_Delete(ApplicationUserCriteria criteria)
		{
            bool cancel = false;
            OnDeleting(criteria, ref cancel);
            if (cancel) return;

            using (var connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Delete]", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
		
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));

                    //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    int result = command.ExecuteNonQuery();
                    if (result == 0)
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
                }
            }

            OnDeleted();
		}
		
		 #region Child_Insert
        /// <summary>
        /// Inserts data into the data base using the information in the current 
        ///    CSLA editable child business object of type <see cref="ApplicationUser"/> 
        /// </summary>
        /// <returns></returns>
        public void Child_Insert(SqlConnection connection,SqlTransaction trans)
        {
            bool cancel = false;
            OnChildInserting(connection, ref cancel,trans);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Insert]", connection,trans))
            {
                command.CommandType = CommandType.StoredProcedure;
		
                command.Parameters.AddWithValue("@p_ApplicationUserID", this.ApplicationUserID);
                command.Parameters["@p_ApplicationUserID"].Direction = ParameterDirection.Output;
                command.Parameters.AddWithValue("@p_LoginName", this.LoginName);
                command.Parameters.AddWithValue("@p_Password", this.Password);
                command.Parameters.AddWithValue("@p_FirstName", this.FirstName);
                command.Parameters.AddWithValue("@p_LastName", ADOHelper.NullCheck(this.LastName));
                command.Parameters.AddWithValue("@p_EmailAddress", ADOHelper.NullCheck(this.EmailAddress));
                command.Parameters.AddWithValue("@p_MobilePhone", ADOHelper.NullCheck(this.MobilePhone));
                command.Parameters.AddWithValue("@p_WorkPhone", ADOHelper.NullCheck(this.WorkPhone));
                command.Parameters.AddWithValue("@p_EmployeeNumber", ADOHelper.NullCheck(this.EmployeeNumber));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_PasswordResetNeeded", this.PasswordResetNeeded);
                command.Parameters.AddWithValue("@p_PasswordResetToken", ADOHelper.NullCheck(this.PasswordResetToken));
                command.Parameters.AddWithValue("@p_PasswordResetTokenExpiry", ADOHelper.NullCheck(this.PasswordResetTokenExpiry));
                command.Parameters.AddWithValue("@p_MustChangePassword", this.MustChangePassword);
                command.Parameters.AddWithValue("@p_ApplicationRoleID", ADOHelper.NullCheck(this.ApplicationRoleID));
                command.Parameters.AddWithValue("@p_LastLoggedOn", ADOHelper.NullCheck(this.LastLoggedOn));
                command.Parameters.AddWithValue("@p_StatementDeliveryOptionID", ADOHelper.NullCheck(this.StatementDeliveryOptionID));
                command.Parameters.AddWithValue("@p_PhysicalAddressID", ADOHelper.NullCheck(this.PhysicalAddressID));
                command.Parameters.AddWithValue("@p_SameAsPhysicalAddress", this.SameAsPhysicalAddress);
                command.Parameters.AddWithValue("@p_PostalAddressID", ADOHelper.NullCheck(this.PostalAddressID));
                command.Parameters.AddWithValue("@p_LastActiveCheckSentOn", ADOHelper.NullCheck(this.LastActiveCheckSentOn));
                command.Parameters.AddWithValue("@p_CreatedBy", ADOHelper.NullCheck(this.CreatedBy));
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_LastPasswordChangedOn", ADOHelper.NullCheck(this.LastPasswordChangedOn));

                command.ExecuteNonQuery();
               
                // Update identity primary key value.
                _applicationUserIDProperty=(System.Int32)command.Parameters["@p_ApplicationUserID"].Value;
            }

            UpdateChildren(this, connection,trans);

            OnChildInserted();
        }

        public void Child_Insert(Address address, SqlConnection connection,SqlTransaction trans)
        {
            Child_Insert(address, null, null, null, connection,trans);
        }


        public void Child_Insert(ApplicationRole applicationRole, SqlConnection connection,SqlTransaction trans)
        {
            Child_Insert(null, applicationRole, null, null, connection,trans);
        }


        public void Child_Insert(ApplicationUser applicationUser, SqlConnection connection,SqlTransaction trans)
        {
            Child_Insert(null, null, applicationUser, null, connection,trans);
        }


        public void Child_Insert(DataOption dataOption, SqlConnection connection,SqlTransaction trans)
        {
            Child_Insert(null, null, null, dataOption, connection,trans);
        }


        public void Child_Insert(Address address, ApplicationRole applicationRole, ApplicationUser applicationUser, DataOption dataOption, SqlConnection connection,SqlTransaction trans)
        {
            bool cancel = false;
            OnChildInserting(address, applicationRole, applicationUser, dataOption, connection, ref cancel,trans);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Insert]", connection,trans))
            {
                command.CommandType = CommandType.StoredProcedure;
		
                command.Parameters.AddWithValue("@p_ApplicationUserID", this.ApplicationUserID);
                command.Parameters["@p_ApplicationUserID"].Direction = ParameterDirection.Output;
                command.Parameters.AddWithValue("@p_LoginName", this.LoginName);
                command.Parameters.AddWithValue("@p_Password", this.Password);
                command.Parameters.AddWithValue("@p_FirstName", this.FirstName);
                command.Parameters.AddWithValue("@p_LastName", ADOHelper.NullCheck(this.LastName));
                command.Parameters.AddWithValue("@p_EmailAddress", ADOHelper.NullCheck(this.EmailAddress));
                command.Parameters.AddWithValue("@p_MobilePhone", ADOHelper.NullCheck(this.MobilePhone));
                command.Parameters.AddWithValue("@p_WorkPhone", ADOHelper.NullCheck(this.WorkPhone));
                command.Parameters.AddWithValue("@p_EmployeeNumber", ADOHelper.NullCheck(this.EmployeeNumber));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_PasswordResetNeeded", this.PasswordResetNeeded);
                command.Parameters.AddWithValue("@p_PasswordResetToken", ADOHelper.NullCheck(this.PasswordResetToken));
                command.Parameters.AddWithValue("@p_PasswordResetTokenExpiry", ADOHelper.NullCheck(this.PasswordResetTokenExpiry));
                command.Parameters.AddWithValue("@p_MustChangePassword", this.MustChangePassword);
                command.Parameters.AddWithValue("@p_ApplicationRoleID", ADOHelper.NullCheck(applicationRole != null ? applicationRole.ApplicationRoleID : this.ApplicationRoleID));
                command.Parameters.AddWithValue("@p_LastLoggedOn", ADOHelper.NullCheck(this.LastLoggedOn));
                command.Parameters.AddWithValue("@p_StatementDeliveryOptionID", ADOHelper.NullCheck(dataOption != null ? dataOption.DataOptionID : this.StatementDeliveryOptionID));
                command.Parameters.AddWithValue("@p_PhysicalAddressID", ADOHelper.NullCheck(address != null ? address.AddressID : this.PhysicalAddressID));
                command.Parameters.AddWithValue("@p_SameAsPhysicalAddress", this.SameAsPhysicalAddress);
                command.Parameters.AddWithValue("@p_PostalAddressID", ADOHelper.NullCheck(address != null ? address.AddressID : this.PostalAddressID));
                command.Parameters.AddWithValue("@p_LastActiveCheckSentOn", ADOHelper.NullCheck(this.LastActiveCheckSentOn));
                command.Parameters.AddWithValue("@p_CreatedBy", ADOHelper.NullCheck(this.CreatedBy));
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(applicationUser != null ? applicationUser.ApplicationUserID : this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_LastPasswordChangedOn", ADOHelper.NullCheck(this.LastPasswordChangedOn));

                command.ExecuteNonQuery();
               
                // Update identity primary key value.
                _applicationUserIDProperty=(System.Int32)command.Parameters["@p_ApplicationUserID"].Value;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(applicationRole != null && applicationRole.ApplicationRoleID != this.ApplicationRoleID)
                _applicationRoleIDProperty= applicationRole.ApplicationRoleID;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(dataOption != null && dataOption.DataOptionID != this.StatementDeliveryOptionID)
                _statementDeliveryOptionIDProperty= dataOption.DataOptionID;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(address != null && address.AddressID != this.PhysicalAddressID)
                _physicalAddressIDProperty= address.AddressID;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(address != null && address.AddressID != this.PostalAddressID)
                _postalAddressIDProperty= address.AddressID;

            // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            if(applicationUser != null && applicationUser.ApplicationUserID != this.UpdatedBy)
                _updatedByProperty= applicationUser.ApplicationUserID;
            }
            
            // A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            // TODO: Please override OnChildInserted() and insert this child manually.
            // UpdateChildren(this, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, connection);

            OnChildInserted();
        }

        #endregion

        #region Child_Update

        /// <summary>
        /// Updates the corresponding record in the data base with the information in the current 
        ///    CSLA editable child business object of type <see cref="ApplicationUser"/> 
        /// </summary>
        /// <returns></returns>
        public void Child_Update(SqlConnection connection,SqlTransaction trans)
        {
            bool cancel = false;
            OnChildUpdating(connection, ref cancel,trans);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Update]", connection,trans))
            {
                command.CommandType = CommandType.StoredProcedure;
		
                command.Parameters.AddWithValue("@p_ApplicationUserID", this.ApplicationUserID);
                command.Parameters.AddWithValue("@p_LoginName", this.LoginName);
                command.Parameters.AddWithValue("@p_Password", this.Password);
                command.Parameters.AddWithValue("@p_FirstName", this.FirstName);
                command.Parameters.AddWithValue("@p_LastName", ADOHelper.NullCheck(this.LastName));
                command.Parameters.AddWithValue("@p_EmailAddress", ADOHelper.NullCheck(this.EmailAddress));
                command.Parameters.AddWithValue("@p_MobilePhone", ADOHelper.NullCheck(this.MobilePhone));
                command.Parameters.AddWithValue("@p_WorkPhone", ADOHelper.NullCheck(this.WorkPhone));
                command.Parameters.AddWithValue("@p_EmployeeNumber", ADOHelper.NullCheck(this.EmployeeNumber));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_PasswordResetNeeded", this.PasswordResetNeeded);
                command.Parameters.AddWithValue("@p_PasswordResetToken", ADOHelper.NullCheck(this.PasswordResetToken));
                command.Parameters.AddWithValue("@p_PasswordResetTokenExpiry", ADOHelper.NullCheck(this.PasswordResetTokenExpiry));
                command.Parameters.AddWithValue("@p_MustChangePassword", this.MustChangePassword);
                command.Parameters.AddWithValue("@p_ApplicationRoleID", ADOHelper.NullCheck(this.ApplicationRoleID));
                command.Parameters.AddWithValue("@p_LastLoggedOn", ADOHelper.NullCheck(this.LastLoggedOn));
                command.Parameters.AddWithValue("@p_StatementDeliveryOptionID", ADOHelper.NullCheck(this.StatementDeliveryOptionID));
                command.Parameters.AddWithValue("@p_PhysicalAddressID", ADOHelper.NullCheck(this.PhysicalAddressID));
                command.Parameters.AddWithValue("@p_SameAsPhysicalAddress", this.SameAsPhysicalAddress);
                command.Parameters.AddWithValue("@p_PostalAddressID", ADOHelper.NullCheck(this.PostalAddressID));
                command.Parameters.AddWithValue("@p_LastActiveCheckSentOn", ADOHelper.NullCheck(this.LastActiveCheckSentOn));
                command.Parameters.AddWithValue("@p_CreatedBy", ADOHelper.NullCheck(this.CreatedBy));
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_LastPasswordChangedOn", ADOHelper.NullCheck(this.LastPasswordChangedOn));

                //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                int result = command.ExecuteNonQuery();
                if (result == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
            }

            UpdateChildren(this, connection,trans);

            OnChildUpdated();
        }

        public void Child_Update(Address address, SqlConnection connection,SqlTransaction trans)
        {
            Child_Update(address, null, null, null, connection,trans);
        }


        public void Child_Update(ApplicationRole applicationRole, SqlConnection connection,SqlTransaction trans)
        {
            Child_Update(null, applicationRole, null, null, connection,trans);
        }


        public void Child_Update(ApplicationUser applicationUser, SqlConnection connection,SqlTransaction trans)
        {
            Child_Update(null, null, applicationUser, null, connection,trans);
        }


        public void Child_Update(DataOption dataOption, SqlConnection connection,SqlTransaction trans)
        {
            Child_Update(null, null, null, dataOption, connection,trans);
        }

 
        public void Child_Update(Address address, ApplicationRole applicationRole, ApplicationUser applicationUser, DataOption dataOption, SqlConnection connection,SqlTransaction trans)
        {
            bool cancel = false;
            OnChildUpdating(address, applicationRole, applicationUser, dataOption, connection, ref cancel,trans);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            using(var command = new SqlCommand("[dbo].[spCFM_ApplicationUser_Update]", connection,trans))
            {
                command.CommandType = CommandType.StoredProcedure;
		
                command.Parameters.AddWithValue("@p_ApplicationUserID", this.ApplicationUserID);
                command.Parameters.AddWithValue("@p_LoginName", this.LoginName);
                command.Parameters.AddWithValue("@p_Password", this.Password);
                command.Parameters.AddWithValue("@p_FirstName", this.FirstName);
                command.Parameters.AddWithValue("@p_LastName", ADOHelper.NullCheck(this.LastName));
                command.Parameters.AddWithValue("@p_EmailAddress", ADOHelper.NullCheck(this.EmailAddress));
                command.Parameters.AddWithValue("@p_MobilePhone", ADOHelper.NullCheck(this.MobilePhone));
                command.Parameters.AddWithValue("@p_WorkPhone", ADOHelper.NullCheck(this.WorkPhone));
                command.Parameters.AddWithValue("@p_EmployeeNumber", ADOHelper.NullCheck(this.EmployeeNumber));
                command.Parameters.AddWithValue("@p_IsActive", this.IsActive);
                command.Parameters.AddWithValue("@p_PasswordResetNeeded", this.PasswordResetNeeded);
                command.Parameters.AddWithValue("@p_PasswordResetToken", ADOHelper.NullCheck(this.PasswordResetToken));
                command.Parameters.AddWithValue("@p_PasswordResetTokenExpiry", ADOHelper.NullCheck(this.PasswordResetTokenExpiry));
                command.Parameters.AddWithValue("@p_MustChangePassword", this.MustChangePassword);
                command.Parameters.AddWithValue("@p_ApplicationRoleID", ADOHelper.NullCheck(applicationRole != null ? applicationRole.ApplicationRoleID : this.ApplicationRoleID));
                command.Parameters.AddWithValue("@p_LastLoggedOn", ADOHelper.NullCheck(this.LastLoggedOn));
                command.Parameters.AddWithValue("@p_StatementDeliveryOptionID", ADOHelper.NullCheck(dataOption != null ? dataOption.DataOptionID : this.StatementDeliveryOptionID));
                command.Parameters.AddWithValue("@p_PhysicalAddressID", ADOHelper.NullCheck(address != null ? address.AddressID : this.PhysicalAddressID));
                command.Parameters.AddWithValue("@p_SameAsPhysicalAddress", this.SameAsPhysicalAddress);
                command.Parameters.AddWithValue("@p_PostalAddressID", ADOHelper.NullCheck(address != null ? address.AddressID : this.PostalAddressID));
                command.Parameters.AddWithValue("@p_LastActiveCheckSentOn", ADOHelper.NullCheck(this.LastActiveCheckSentOn));
                command.Parameters.AddWithValue("@p_CreatedBy", ADOHelper.NullCheck(this.CreatedBy));
                command.Parameters.AddWithValue("@p_CreatedOn", this.CreatedOn);
                command.Parameters.AddWithValue("@p_UpdatedBy", ADOHelper.NullCheck(applicationUser != null ? applicationUser.ApplicationUserID : this.UpdatedBy));
                command.Parameters.AddWithValue("@p_UpdatedOn", ADOHelper.NullCheck(this.UpdatedOn));
                command.Parameters.AddWithValue("@p_LastPasswordChangedOn", ADOHelper.NullCheck(this.LastPasswordChangedOn));

                //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                int result = command.ExecuteNonQuery();
                if (result == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(applicationRole != null && applicationRole.ApplicationRoleID != this.ApplicationRoleID)
                    _applicationRoleIDProperty= applicationRole.ApplicationRoleID;

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(dataOption != null && dataOption.DataOptionID != this.StatementDeliveryOptionID)
                    _statementDeliveryOptionIDProperty= dataOption.DataOptionID;

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(address != null && address.AddressID != this.PhysicalAddressID)
                    _physicalAddressIDProperty= address.AddressID;

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(address != null && address.AddressID != this.PostalAddressID)
                    _postalAddressIDProperty= address.AddressID;

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(applicationUser != null && applicationUser.ApplicationUserID != this.UpdatedBy)
                    _updatedByProperty= applicationUser.ApplicationUserID;
            }
            
            // A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            // TODO: Please override OnChildUpdated() and update this child manually.
            // UpdateChildren(this, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, connection);

            OnChildUpdated();
        }
        #endregion

        /// <summary>
        /// Deletes the corresponding record in the data base with the information in the current 
        ///    CSLA editable child business object of type <see cref="ApplicationUser"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_DeleteSelf(SqlConnection connection)
        {
            bool cancel = false;
            OnChildSelfDeleting(connection, ref cancel);
            if (cancel) return;
            
            //DataPortal_Delete(new ApplicationUserCriteria (ApplicationUserID), connection);
        
            OnChildSelfDeleted();
        }

        #region Map
		public void InitDTO()
		{
			  ApplicationUserDTO dt=new ApplicationUserDTO();
			dt.ApplicationUserID =this.ApplicationUserID ;
			dt.LoginName =this.LoginName ;
			dt.Password =this.Password ;
			dt.FirstName =this.FirstName ;
			dt.LastName =this.LastName ;
			dt.EmailAddress =this.EmailAddress ;
			dt.MobilePhone =this.MobilePhone ;
			dt.WorkPhone =this.WorkPhone ;
			dt.EmployeeNumber =this.EmployeeNumber ;
			dt.IsActive =this.IsActive ;
			dt.PasswordResetNeeded =this.PasswordResetNeeded ;
			dt.PasswordResetToken =this.PasswordResetToken ;
			dt.PasswordResetTokenExpiry =this.PasswordResetTokenExpiry ;
			dt.MustChangePassword =this.MustChangePassword ;
			dt.ApplicationRoleID =this.ApplicationRoleID ;
			dt.LastLoggedOn =this.LastLoggedOn ;
			dt.StatementDeliveryOptionID =this.StatementDeliveryOptionID ;
			dt.PhysicalAddressID =this.PhysicalAddressID ;
			dt.SameAsPhysicalAddress =this.SameAsPhysicalAddress ;
			dt.PostalAddressID =this.PostalAddressID ;
			dt.LastActiveCheckSentOn =this.LastActiveCheckSentOn ;
			dt.CreatedBy =this.CreatedBy ;
			dt.CreatedOn =this.CreatedOn ;
			dt.UpdatedBy =this.UpdatedBy ;
			dt.UpdatedOn =this.UpdatedOn ;
			dt.LastPasswordChangedOn =this.LastPasswordChangedOn ;
   //LoadProperty(_currentDto, dt);
  this.CurrentDTO = dt;

		}
		/*
        private void Map(SafeDataReader reader)
        {
            bool cancel = false;
            OnMapping(reader, ref cancel);
            if (cancel) return;

            using(BypassPropertyChecks)
            {
                LoadProperty(_applicationUserIDProperty, reader["ApplicationUserID"]);
                LoadProperty(_loginNameProperty, reader["LoginName"]);
                LoadProperty(_passwordProperty, reader["Password"]);
                LoadProperty(_firstNameProperty, reader["FirstName"]);
                LoadProperty(_lastNameProperty, reader["LastName"]);
                LoadProperty(_emailAddressProperty, reader["EmailAddress"]);
                LoadProperty(_mobilePhoneProperty, reader["MobilePhone"]);
                LoadProperty(_workPhoneProperty, reader["WorkPhone"]);
                LoadProperty(_employeeNumberProperty, reader["EmployeeNumber"]);
                LoadProperty(_isActiveProperty, reader["IsActive"]);
                LoadProperty(_passwordResetNeededProperty, reader["PasswordResetNeeded"]);
                LoadProperty(_passwordResetTokenProperty, reader["PasswordResetToken"]);
                LoadProperty(_passwordResetTokenExpiryProperty, reader["PasswordResetTokenExpiry"]);
                LoadProperty(_mustChangePasswordProperty, reader["MustChangePassword"]);
                LoadProperty(_applicationRoleIDProperty, reader["ApplicationRoleID"]);
                LoadProperty(_lastLoggedOnProperty, reader["LastLoggedOn"]);
                LoadProperty(_statementDeliveryOptionIDProperty, reader["StatementDeliveryOptionID"]);
                LoadProperty(_physicalAddressIDProperty, reader["PhysicalAddressID"]);
                LoadProperty(_sameAsPhysicalAddressProperty, reader["SameAsPhysicalAddress"]);
                LoadProperty(_postalAddressIDProperty, reader["PostalAddressID"]);
                LoadProperty(_lastActiveCheckSentOnProperty, reader["LastActiveCheckSentOn"]);
                LoadProperty(_createdByProperty, reader["CreatedBy"]);
                LoadProperty(_createdOnProperty, reader["CreatedOn"]);
                LoadProperty(_updatedByProperty, reader["UpdatedBy"]);
                LoadProperty(_updatedOnProperty, reader["UpdatedOn"]);
                LoadProperty(_lastPasswordChangedOnProperty, reader["LastPasswordChangedOn"]);
            }	
			InitDTO();
            OnMapped();
        }
        
        private void Child_Fetch(SafeDataReader reader)
        {
            Map(reader);
        }
		*/

        #endregion
	}
}
 